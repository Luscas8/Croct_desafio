import {
  require_jsx_runtime
} from "./chunk-LDMQO5XO.js";
import {
  require_react
} from "./chunk-5SDAPIJE.js";
import {
  __commonJS
} from "./chunk-TWLJ45QX.js";

// node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "node_modules/tslib/tslib.js"(exports, module) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@croct/sdk/validation/schema.js
var require_schema = __commonJS({
  "node_modules/@croct/sdk/validation/schema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Violation = void 0;
    var tslib_1 = require_tslib();
    var Violation = function(_super) {
      tslib_1.__extends(Violation2, _super);
      function Violation2(message, path, params) {
        var _this = _super.call(this, message) || this;
        _this.path = path;
        _this.params = params;
        return _this;
      }
      return Violation2;
    }(Error);
    exports.Violation = Violation;
  }
});

// node_modules/@croct/sdk/validation/violation.js
var require_violation = __commonJS({
  "node_modules/@croct/sdk/validation/violation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.formatPath = exports.describe = void 0;
    function describe(value) {
      if (value === null) {
        return "null";
      }
      if (Array.isArray(value)) {
        return "array";
      }
      if (typeof value === "number") {
        return Number.isInteger(value) ? "integer" : "number";
      }
      if (typeof value === "object") {
        return value.constructor.name;
      }
      return typeof value;
    }
    exports.describe = describe;
    function formatPath(path) {
      return "/".concat(path.join("/"));
    }
    exports.formatPath = formatPath;
  }
});

// node_modules/@croct/sdk/validation/arrayType.js
var require_arrayType = __commonJS({
  "node_modules/@croct/sdk/validation/arrayType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ArrayType = void 0;
    var tslib_1 = require_tslib();
    var schema_1 = require_schema();
    var violation_1 = require_violation();
    var ArrayType = function() {
      function ArrayType2(definition) {
        if (definition === void 0) {
          definition = {};
        }
        var _a, _b;
        this.definition = tslib_1.__assign(tslib_1.__assign({}, definition), { minItems: (_a = definition.minItems) !== null && _a !== void 0 ? _a : -1, maxItems: (_b = definition.maxItems) !== null && _b !== void 0 ? _b : -1 });
      }
      ArrayType2.prototype.getTypes = function() {
        return ["array"];
      };
      ArrayType2.prototype.isValidType = function(value) {
        return Array.isArray(value);
      };
      ArrayType2.prototype.validate = function(value, path) {
        if (path === void 0) {
          path = [];
        }
        if (!this.isValidType(value)) {
          throw new schema_1.Violation("Expected value of type array at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat((0, violation_1.describe)(value), "."), path, { type: "string" });
        }
        var _a = this.definition, minItems = _a.minItems, maxItems = _a.maxItems;
        var length = value.length;
        if (minItems >= 0 && minItems > length) {
          throw new schema_1.Violation("Expected ".concat(minItems === maxItems ? "exactly" : "at least", " ") + "".concat(minItems, " ").concat(minItems === 1 ? "item" : "items", " ") + "at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat(length, "."), path, { limit: minItems });
        }
        if (maxItems >= 0 && maxItems < length) {
          throw new schema_1.Violation("Expected ".concat(minItems === maxItems ? "exactly" : "at most", " ") + "".concat(maxItems, " ").concat(maxItems === 1 ? "item" : "items", " ") + "at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat(length, "."), path, { limit: maxItems });
        }
        if (this.definition.items === void 0) {
          return;
        }
        for (var index = 0; index < length; index++) {
          this.definition.items.validate(value[index], path.concat([index.toString()]));
        }
      };
      return ArrayType2;
    }();
    exports.ArrayType = ArrayType;
  }
});

// node_modules/@croct/sdk/validation/booleanType.js
var require_booleanType = __commonJS({
  "node_modules/@croct/sdk/validation/booleanType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BooleanType = void 0;
    var schema_1 = require_schema();
    var violation_1 = require_violation();
    var BooleanType = function() {
      function BooleanType2() {
      }
      BooleanType2.prototype.getTypes = function() {
        return ["boolean"];
      };
      BooleanType2.prototype.isValidType = function(value) {
        return typeof value === "boolean";
      };
      BooleanType2.prototype.validate = function(value, path) {
        if (path === void 0) {
          path = [];
        }
        if (!this.isValidType(value)) {
          throw new schema_1.Violation("Expected value of type boolean at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat((0, violation_1.describe)(value), "."), path, { type: "boolean" });
        }
      };
      return BooleanType2;
    }();
    exports.BooleanType = BooleanType;
  }
});

// node_modules/@croct/sdk/validation/functionType.js
var require_functionType = __commonJS({
  "node_modules/@croct/sdk/validation/functionType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FunctionType = void 0;
    var schema_1 = require_schema();
    var violation_1 = require_violation();
    var FunctionType = function() {
      function FunctionType2() {
      }
      FunctionType2.prototype.getTypes = function() {
        return ["function"];
      };
      FunctionType2.prototype.isValidType = function(value) {
        return typeof value === "function";
      };
      FunctionType2.prototype.validate = function(value, path) {
        if (path === void 0) {
          path = [];
        }
        if (!this.isValidType(value)) {
          throw new schema_1.Violation("Expected value of type function at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat((0, violation_1.describe)(value), "."), path, { type: "function" });
        }
      };
      return FunctionType2;
    }();
    exports.FunctionType = FunctionType;
  }
});

// node_modules/@croct/sdk/validation/jsonType.js
var require_jsonType = __commonJS({
  "node_modules/@croct/sdk/validation/jsonType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JsonType = exports.JsonPrimitiveType = exports.JsonArrayType = exports.JsonObjectType = void 0;
    var tslib_1 = require_tslib();
    var schema_1 = require_schema();
    var violation_1 = require_violation();
    function isJsonPrimitive(value) {
      return value === null || typeof value === "string" || typeof value === "boolean" || typeof value === "number";
    }
    function isJsonArray(value) {
      return Array.isArray(value) && value.every(isJsonValue);
    }
    function isJsonValue(value) {
      return isJsonPrimitive(value) || isJsonArray(value) || isJsonObject(value);
    }
    function isJsonObject(value) {
      return isPlainObject(value) && Object.values(value).every(isJsonValue);
    }
    function isPlainObject(value) {
      return Object.prototype.toString.call(value) === "[object Object]";
    }
    var JsonObjectType = function() {
      function JsonObjectType2(definition) {
        if (definition === void 0) {
          definition = {};
        }
        this.definition = definition;
      }
      JsonObjectType2.prototype.getTypes = function() {
        return ["object"];
      };
      JsonObjectType2.prototype.isValidType = function(value) {
        return isPlainObject(value);
      };
      JsonObjectType2.prototype.validate = function(value, path) {
        var e_1, _a;
        if (path === void 0) {
          path = [];
        }
        if (!isJsonObject(value)) {
          throw new schema_1.Violation("Expected a JSON object at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat((0, violation_1.describe)(value), "."), path, { type: "object" });
        }
        if (this.definition.properties === void 0 && this.definition.propertyNames === void 0) {
          return;
        }
        try {
          for (var _b = tslib_1.__values(Object.entries(value)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = tslib_1.__read(_c.value, 2), entryName = _d[0], entryValue = _d[1];
            var propertyPath = path.concat([entryName]);
            if (this.definition.propertyNames !== void 0) {
              this.definition.propertyNames.validate(entryName, propertyPath);
            }
            if (this.definition.properties !== void 0) {
              this.definition.properties.validate(entryValue, path.concat([entryName]));
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      };
      return JsonObjectType2;
    }();
    exports.JsonObjectType = JsonObjectType;
    var JsonArrayType = function() {
      function JsonArrayType2(definition) {
        if (definition === void 0) {
          definition = {};
        }
        this.definition = definition;
      }
      JsonArrayType2.prototype.getTypes = function() {
        return ["array"];
      };
      JsonArrayType2.prototype.isValidType = function(value) {
        return Array.isArray(value);
      };
      JsonArrayType2.prototype.validate = function(value, path) {
        if (path === void 0) {
          path = [];
        }
        if (!isJsonArray(value)) {
          throw new schema_1.Violation("Expected a JSON array at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat((0, violation_1.describe)(value), "."), path, { type: "array" });
        }
        if (this.definition.items === void 0) {
          return;
        }
        for (var index = 0; index < value.length; index++) {
          this.definition.items.validate(value[index], path.concat([index.toString()]));
        }
      };
      return JsonArrayType2;
    }();
    exports.JsonArrayType = JsonArrayType;
    var JsonPrimitiveType = function() {
      function JsonPrimitiveType2() {
      }
      JsonPrimitiveType2.prototype.getTypes = function() {
        return ["null", "number", "string", "boolean"];
      };
      JsonPrimitiveType2.prototype.isValidType = function(value) {
        return isJsonPrimitive(value);
      };
      JsonPrimitiveType2.prototype.validate = function(value, path) {
        if (path === void 0) {
          path = [];
        }
        if (!this.isValidType(value)) {
          throw new schema_1.Violation("Expected a JSON primitive at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat((0, violation_1.describe)(value), "."), path, { type: this.getTypes().join("|") });
        }
      };
      return JsonPrimitiveType2;
    }();
    exports.JsonPrimitiveType = JsonPrimitiveType;
    var JsonType = function() {
      function JsonType2() {
      }
      JsonType2.prototype.getTypes = function() {
        return ["null", "number", "string", "boolean", "array", "object"];
      };
      JsonType2.prototype.isValidType = function(value) {
        return isJsonPrimitive(value) || Array.isArray(value) || isPlainObject(value);
      };
      JsonType2.prototype.validate = function(value, path) {
        if (path === void 0) {
          path = [];
        }
        if (!isJsonValue(value)) {
          throw new schema_1.Violation("Expected a JSON value at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat((0, violation_1.describe)(value), "."), path, { type: this.getTypes().join("|") });
        }
      };
      return JsonType2;
    }();
    exports.JsonType = JsonType;
  }
});

// node_modules/@croct/sdk/validation/mixedSchema.js
var require_mixedSchema = __commonJS({
  "node_modules/@croct/sdk/validation/mixedSchema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MixedSchema = void 0;
    var MixedSchema = function() {
      function MixedSchema2() {
      }
      MixedSchema2.prototype.validate = function() {
      };
      return MixedSchema2;
    }();
    exports.MixedSchema = MixedSchema;
  }
});

// node_modules/@croct/sdk/validation/nullType.js
var require_nullType = __commonJS({
  "node_modules/@croct/sdk/validation/nullType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NullType = void 0;
    var schema_1 = require_schema();
    var violation_1 = require_violation();
    var NullType = function() {
      function NullType2() {
      }
      NullType2.prototype.getTypes = function() {
        return ["null"];
      };
      NullType2.prototype.isValidType = function(value) {
        return value === null;
      };
      NullType2.prototype.validate = function(value, path) {
        if (path === void 0) {
          path = [];
        }
        if (!this.isValidType(value)) {
          throw new schema_1.Violation("Expected value of type null at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat((0, violation_1.describe)(value), "."), path, { type: "null" });
        }
      };
      return NullType2;
    }();
    exports.NullType = NullType;
  }
});

// node_modules/@croct/sdk/validation/numberType.js
var require_numberType = __commonJS({
  "node_modules/@croct/sdk/validation/numberType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NumberType = void 0;
    var tslib_1 = require_tslib();
    var schema_1 = require_schema();
    var violation_1 = require_violation();
    var NumberType = function() {
      function NumberType2(definition) {
        if (definition === void 0) {
          definition = {};
        }
        var _a, _b, _c;
        this.definition = tslib_1.__assign(tslib_1.__assign({}, definition), { integer: (_a = definition.integer) !== null && _a !== void 0 ? _a : false, minimum: (_b = definition.minimum) !== null && _b !== void 0 ? _b : Number.NEGATIVE_INFINITY, maximum: (_c = definition.maximum) !== null && _c !== void 0 ? _c : Number.POSITIVE_INFINITY });
      }
      NumberType2.prototype.getTypes = function() {
        return [this.definition.integer ? "integer" : "number"];
      };
      NumberType2.prototype.isValidType = function(value) {
        return typeof value === "number" && (!this.definition.integer || Number.isInteger(value));
      };
      NumberType2.prototype.validate = function(value, path) {
        if (path === void 0) {
          path = [];
        }
        if (!this.isValidType(value)) {
          var type = this.getTypes()[0];
          throw new schema_1.Violation("Expected value of type ".concat(type, " at path '").concat((0, violation_1.formatPath)(path), "', actual ").concat((0, violation_1.describe)(value), "."), path, { type });
        }
        if (value < this.definition.minimum) {
          throw new schema_1.Violation("Expected a value greater than or equal to ".concat(this.definition.minimum, " ") + "at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat(value, "."), path, { limit: this.definition.minimum });
        }
        if (value > this.definition.maximum) {
          throw new schema_1.Violation("Expected a value less than or equal to ".concat(this.definition.maximum, " ") + "at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat(value, "."), path, { limit: this.definition.maximum });
        }
      };
      return NumberType2;
    }();
    exports.NumberType = NumberType;
  }
});

// node_modules/@croct/sdk/validation/objectType.js
var require_objectType = __commonJS({
  "node_modules/@croct/sdk/validation/objectType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ObjectType = void 0;
    var tslib_1 = require_tslib();
    var schema_1 = require_schema();
    var mixedSchema_1 = require_mixedSchema();
    var violation_1 = require_violation();
    var ObjectType = function() {
      function ObjectType2(schema) {
        if (schema === void 0) {
          schema = {};
        }
        var _a, _b, _c, _d, _e, _f;
        this.definition = tslib_1.__assign(tslib_1.__assign({}, schema), { properties: (_a = schema.properties) !== null && _a !== void 0 ? _a : {}, required: (_b = schema.required) !== null && _b !== void 0 ? _b : [], additionalProperties: (_c = schema.additionalProperties) !== null && _c !== void 0 ? _c : false, propertyNames: (_d = schema.propertyNames) !== null && _d !== void 0 ? _d : new mixedSchema_1.MixedSchema(), minProperties: (_e = schema.minProperties) !== null && _e !== void 0 ? _e : -1, maxProperties: (_f = schema.maxProperties) !== null && _f !== void 0 ? _f : -1 });
      }
      ObjectType2.prototype.getTypes = function() {
        if (this.definition.type !== void 0) {
          return [this.definition.type.name];
        }
        return ["object"];
      };
      ObjectType2.prototype.isValidType = function(value) {
        if (this.definition.type !== void 0) {
          return value instanceof this.definition.type;
        }
        return Object.prototype.toString.call(value) === "[object Object]";
      };
      ObjectType2.prototype.validate = function(value, path) {
        var e_1, _a, e_2, _b;
        if (path === void 0) {
          path = [];
        }
        if (!this.isValidType(value)) {
          var _c = tslib_1.__read(this.getTypes(), 1), type = _c[0];
          throw new schema_1.Violation("Expected value of type ".concat(type, " at path '").concat((0, violation_1.formatPath)(path), "', ") + "actual ".concat((0, violation_1.describe)(value), "."), path, { type });
        }
        var entries = Object.entries(value);
        var _d = this.definition, minProperties = _d.minProperties, maxProperties = _d.maxProperties;
        if (minProperties >= 0 && minProperties > entries.length) {
          throw new schema_1.Violation("Expected ".concat(minProperties === maxProperties ? "exactly" : "at least", " ") + "".concat(minProperties, " ").concat(minProperties === 1 ? "entry" : "entries", " ") + "at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat(entries.length, "."), path, { limit: minProperties });
        }
        if (maxProperties >= 0 && maxProperties < entries.length) {
          throw new schema_1.Violation("Expected ".concat(minProperties === maxProperties ? "exactly" : "at most", " ") + "".concat(maxProperties, " ").concat(maxProperties === 1 ? "entry" : "entries", " ") + "at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat(entries.length, "."), path, { limit: maxProperties });
        }
        var additionalProperties = tslib_1.__assign({}, value);
        try {
          for (var _e = tslib_1.__values(this.definition.required), _f = _e.next(); !_f.done; _f = _e.next()) {
            var property = _f.value;
            if (!(property in value)) {
              throw new schema_1.Violation("Missing property '".concat((0, violation_1.formatPath)(path.concat([property])), "'."), path, {
                required: property
              });
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_f && !_f.done && (_a = _e.return))
              _a.call(_e);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        try {
          for (var entries_1 = tslib_1.__values(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {
            var _g = tslib_1.__read(entries_1_1.value, 2), entryName = _g[0], entryValue = _g[1];
            var propertyPath = path.concat([entryName]);
            this.definition.propertyNames.validate(entryName, propertyPath);
            var propertyRule = this.definition.properties[entryName];
            if (propertyRule !== void 0) {
              propertyRule.validate(entryValue, propertyPath);
              delete additionalProperties[entryName];
              continue;
            }
            if (this.definition.additionalProperties === false) {
              throw new schema_1.Violation("Unknown property '".concat((0, violation_1.formatPath)(propertyPath), "'."), propertyPath, {
                additionalProperty: entryName
              });
            }
            if (this.definition.additionalProperties !== true) {
              this.definition.additionalProperties.validate(entryValue, propertyPath);
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (entries_1_1 && !entries_1_1.done && (_b = entries_1.return))
              _b.call(entries_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
        var subtypes = this.definition.subtypes;
        if (subtypes !== void 0) {
          var type = value[subtypes.discriminator];
          if (type !== void 0 && subtypes.schemas[type] !== void 0) {
            subtypes.schemas[type].validate(additionalProperties, path);
          }
        }
      };
      return ObjectType2;
    }();
    exports.ObjectType = ObjectType;
  }
});

// node_modules/@croct/sdk/validation/stringType.js
var require_stringType = __commonJS({
  "node_modules/@croct/sdk/validation/stringType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StringType = void 0;
    var tslib_1 = require_tslib();
    var schema_1 = require_schema();
    var violation_1 = require_violation();
    var FORMAT = {
      pointer: function pointer(value) {
        return /^(\.|([a-zA-Z_][a-zA-Z0-9_]*|\[[0-9]+])(\.[a-zA-Z_][a-zA-Z0-9_]*|\[[0-9]+])*)$/.test(value);
      },
      identifier: function identifier(value) {
        return /^[a-zA-Z_][a-zA-Z0-9_]*$/.test(value);
      },
      uuid: function uuid(value) {
        return /^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/.test(value);
      },
      date: function date(value) {
        return /^(\d\d\d\d)-(\d\d)-(\d\d)$/.test(value);
      },
      url: function url(value) {
        try {
          new URL(value);
        } catch (_a) {
          return false;
        }
        return true;
      },
      "uri-reference": function uriReference(value) {
        try {
          new URL(value, "http://any.thing");
        } catch (_a) {
          return false;
        }
        return true;
      }
    };
    var StringType = function() {
      function StringType2(definition) {
        if (definition === void 0) {
          definition = {};
        }
        var _a, _b, _c;
        this.definition = tslib_1.__assign(tslib_1.__assign({}, definition), { minLength: (_a = definition.minLength) !== null && _a !== void 0 ? _a : -1, maxLength: (_b = definition.maxLength) !== null && _b !== void 0 ? _b : -1, enumeration: (_c = definition.enumeration) !== null && _c !== void 0 ? _c : [] });
      }
      StringType2.prototype.getTypes = function() {
        return ["string"];
      };
      StringType2.prototype.isValidType = function(value) {
        return typeof value === "string";
      };
      StringType2.prototype.validate = function(value, path) {
        if (path === void 0) {
          path = [];
        }
        if (!this.isValidType(value)) {
          throw new schema_1.Violation("Expected value of type string at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat((0, violation_1.describe)(value), "."), path, { type: "string" });
        }
        var _a = this.definition, minLength = _a.minLength, maxLength = _a.maxLength;
        if (minLength >= 0 && minLength > value.length) {
          throw new schema_1.Violation("Expected ".concat(minLength === maxLength ? "exactly" : "at least", " ") + "".concat(minLength, " ").concat(minLength === 1 ? "character" : "characters", " ") + "at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat(value.length, "."), path, { limit: minLength });
        }
        if (maxLength >= 0 && maxLength < value.length) {
          throw new schema_1.Violation("Expected ".concat(minLength === maxLength ? "exactly" : "at most", " ") + "".concat(maxLength, " ").concat(maxLength === 1 ? "character" : "characters", " ") + "at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat(value.length, "."), path, { limit: maxLength });
        }
        var enumeration = this.definition.enumeration;
        if (enumeration.length > 0 && enumeration.indexOf(value) < 0) {
          throw new schema_1.Violation("Unexpected value at path '".concat((0, violation_1.formatPath)(path), "', expecting ") + "'".concat(enumeration.length === 1 ? enumeration[0] : "".concat(enumeration.slice(0, -1).join("', '"), "' or '").concat(enumeration.slice(-1)), "', ") + "found '".concat(value, "'."), path, { enumeration });
        }
        var _b = this.definition, format = _b.format, pattern = _b.pattern;
        if (format !== void 0 && !FORMAT[format](value)) {
          throw new schema_1.Violation("Invalid ".concat(format, " format at path '").concat((0, violation_1.formatPath)(path), "'."), path, { format });
        }
        if (pattern !== void 0 && !pattern.test(value)) {
          throw new schema_1.Violation("Invalid format at path '".concat((0, violation_1.formatPath)(path), "'."), path, { pattern });
        }
      };
      return StringType2;
    }();
    exports.StringType = StringType;
  }
});

// node_modules/@croct/sdk/validation/unionType.js
var require_unionType = __commonJS({
  "node_modules/@croct/sdk/validation/unionType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UnionType = void 0;
    var tslib_1 = require_tslib();
    var schema_1 = require_schema();
    var violation_1 = require_violation();
    var UnionType = function() {
      function UnionType2(first, second) {
        var others = [];
        for (var _i = 2; _i < arguments.length; _i++) {
          others[_i - 2] = arguments[_i];
        }
        this.schemas = tslib_1.__spreadArray([first, second], tslib_1.__read(others), false);
      }
      UnionType2.prototype.getTypes = function() {
        var e_1, _a, e_2, _b;
        var types = [];
        try {
          for (var _c = tslib_1.__values(this.schemas), _d = _c.next(); !_d.done; _d = _c.next()) {
            var schema = _d.value;
            try {
              for (var _e = (e_2 = void 0, tslib_1.__values(schema.getTypes())), _f = _e.next(); !_f.done; _f = _e.next()) {
                var type = _f.value;
                if (types.indexOf(type) < 0) {
                  types.push(type);
                }
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (_f && !_f.done && (_b = _e.return))
                  _b.call(_e);
              } finally {
                if (e_2)
                  throw e_2.error;
              }
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_d && !_d.done && (_a = _c.return))
              _a.call(_c);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        return types;
      };
      UnionType2.prototype.isValidType = function(value) {
        var e_3, _a;
        try {
          for (var _b = tslib_1.__values(this.schemas), _c = _b.next(); !_c.done; _c = _b.next()) {
            var schema = _c.value;
            if (schema.isValidType(value)) {
              return true;
            }
          }
        } catch (e_3_1) {
          e_3 = { error: e_3_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_3)
              throw e_3.error;
          }
        }
        return false;
      };
      UnionType2.prototype.validate = function(value, path) {
        var e_4, _a;
        if (path === void 0) {
          path = [];
        }
        try {
          for (var _b = tslib_1.__values(this.schemas), _c = _b.next(); !_c.done; _c = _b.next()) {
            var schema = _c.value;
            if (schema.isValidType(value)) {
              schema.validate(value, path);
              return;
            }
          }
        } catch (e_4_1) {
          e_4 = { error: e_4_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_4)
              throw e_4.error;
          }
        }
        var types = this.getTypes();
        throw new schema_1.Violation("Expected value of type ".concat(types.slice(0, -1).join(", "), " or ").concat(types[types.length - 1], " ") + "at path '".concat((0, violation_1.formatPath)(path), "', actual ").concat((0, violation_1.describe)(value), "."), path, { type: types.join("|") });
      };
      return UnionType2;
    }();
    exports.UnionType = UnionType;
  }
});

// node_modules/@croct/sdk/validation/index.js
var require_validation = __commonJS({
  "node_modules/@croct/sdk/validation/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UnionType = exports.StringType = exports.ObjectType = exports.NumberType = exports.NullType = exports.MixedSchema = exports.JsonPrimitiveType = exports.JsonObjectType = exports.JsonArrayType = exports.JsonType = exports.FunctionType = exports.BooleanType = exports.ArrayType = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_schema(), exports);
    tslib_1.__exportStar(require_violation(), exports);
    var arrayType_1 = require_arrayType();
    Object.defineProperty(exports, "ArrayType", { enumerable: true, get: function() {
      return arrayType_1.ArrayType;
    } });
    var booleanType_1 = require_booleanType();
    Object.defineProperty(exports, "BooleanType", { enumerable: true, get: function() {
      return booleanType_1.BooleanType;
    } });
    var functionType_1 = require_functionType();
    Object.defineProperty(exports, "FunctionType", { enumerable: true, get: function() {
      return functionType_1.FunctionType;
    } });
    var jsonType_1 = require_jsonType();
    Object.defineProperty(exports, "JsonType", { enumerable: true, get: function() {
      return jsonType_1.JsonType;
    } });
    Object.defineProperty(exports, "JsonArrayType", { enumerable: true, get: function() {
      return jsonType_1.JsonArrayType;
    } });
    Object.defineProperty(exports, "JsonObjectType", { enumerable: true, get: function() {
      return jsonType_1.JsonObjectType;
    } });
    Object.defineProperty(exports, "JsonPrimitiveType", { enumerable: true, get: function() {
      return jsonType_1.JsonPrimitiveType;
    } });
    var mixedSchema_1 = require_mixedSchema();
    Object.defineProperty(exports, "MixedSchema", { enumerable: true, get: function() {
      return mixedSchema_1.MixedSchema;
    } });
    var nullType_1 = require_nullType();
    Object.defineProperty(exports, "NullType", { enumerable: true, get: function() {
      return nullType_1.NullType;
    } });
    var numberType_1 = require_numberType();
    Object.defineProperty(exports, "NumberType", { enumerable: true, get: function() {
      return numberType_1.NumberType;
    } });
    var objectType_1 = require_objectType();
    Object.defineProperty(exports, "ObjectType", { enumerable: true, get: function() {
      return objectType_1.ObjectType;
    } });
    var stringType_1 = require_stringType();
    Object.defineProperty(exports, "StringType", { enumerable: true, get: function() {
      return stringType_1.StringType;
    } });
    var unionType_1 = require_unionType();
    Object.defineProperty(exports, "UnionType", { enumerable: true, get: function() {
      return unionType_1.UnionType;
    } });
  }
});

// node_modules/@croct/sdk/schema/contextSchemas.js
var require_contextSchemas = __commonJS({
  "node_modules/@croct/sdk/schema/contextSchemas.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokenScopeSchema = void 0;
    var validation_1 = require_validation();
    exports.tokenScopeSchema = new validation_1.StringType({
      enumeration: ["global", "contextual", "isolated"]
    });
  }
});

// node_modules/@croct/sdk/schema/ecommerceSchemas.js
var require_ecommerceSchemas = __commonJS({
  "node_modules/@croct/sdk/schema/ecommerceSchemas.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.order = exports.orderItem = exports.cart = exports.cartItem = exports.productDetails = void 0;
    var validation_1 = require_validation();
    exports.productDetails = new validation_1.ObjectType({
      required: ["productId", "name", "displayPrice"],
      properties: {
        productId: new validation_1.StringType({
          minLength: 1,
          maxLength: 50
        }),
        sku: new validation_1.StringType({
          minLength: 1,
          maxLength: 50
        }),
        name: new validation_1.StringType({
          minLength: 1,
          maxLength: 200
        }),
        category: new validation_1.StringType({
          minLength: 1,
          maxLength: 100
        }),
        brand: new validation_1.StringType({
          minLength: 1,
          maxLength: 100
        }),
        variant: new validation_1.StringType({
          minLength: 1,
          maxLength: 50
        }),
        displayPrice: new validation_1.NumberType({
          minimum: 0
        }),
        originalPrice: new validation_1.NumberType({
          minimum: 0
        }),
        url: new validation_1.StringType({
          format: "url"
        }),
        imageUrl: new validation_1.StringType({
          format: "url"
        })
      }
    });
    exports.cartItem = new validation_1.ObjectType({
      required: ["index", "product", "quantity", "total"],
      properties: {
        index: new validation_1.NumberType({
          minimum: 0
        }),
        product: exports.productDetails,
        quantity: new validation_1.NumberType({
          minimum: 1
        }),
        total: new validation_1.NumberType({
          minimum: 0
        }),
        discount: new validation_1.NumberType({
          minimum: 0
        }),
        coupon: new validation_1.StringType({
          minLength: 1,
          maxLength: 50
        })
      }
    });
    exports.cart = new validation_1.ObjectType({
      required: ["currency", "items", "total"],
      properties: {
        currency: new validation_1.StringType({
          maxLength: 10,
          minLength: 1
        }),
        items: new validation_1.ArrayType({
          items: exports.cartItem
        }),
        subtotal: new validation_1.NumberType({
          minimum: 0
        }),
        shippingPrice: new validation_1.NumberType({
          minimum: 0
        }),
        taxes: new validation_1.ObjectType({
          additionalProperties: new validation_1.NumberType(),
          minProperties: 1
        }),
        costs: new validation_1.ObjectType({
          additionalProperties: new validation_1.NumberType(),
          minProperties: 1
        }),
        discount: new validation_1.NumberType({
          minimum: 0
        }),
        total: new validation_1.NumberType({
          minimum: 0
        }),
        coupon: new validation_1.StringType({
          minLength: 1,
          maxLength: 50
        }),
        lastUpdateTime: new validation_1.NumberType()
      }
    });
    exports.orderItem = new validation_1.ObjectType({
      required: ["index", "product", "quantity", "total"],
      properties: {
        index: new validation_1.NumberType({
          minimum: 0
        }),
        product: exports.productDetails,
        quantity: new validation_1.NumberType({
          minimum: 1
        }),
        total: new validation_1.NumberType({
          minimum: 0
        }),
        discount: new validation_1.NumberType({
          minimum: 0
        }),
        coupon: new validation_1.StringType({
          minLength: 1,
          maxLength: 50
        })
      }
    });
    exports.order = new validation_1.ObjectType({
      required: ["orderId", "currency", "items", "total"],
      properties: {
        orderId: new validation_1.StringType({
          minLength: 1,
          maxLength: 50
        }),
        currency: new validation_1.StringType({
          maxLength: 10,
          minLength: 1
        }),
        items: new validation_1.ArrayType({
          items: exports.orderItem,
          minItems: 1
        }),
        subtotal: new validation_1.NumberType({
          minimum: 0
        }),
        shippingPrice: new validation_1.NumberType({
          minimum: 0
        }),
        taxes: new validation_1.ObjectType({
          additionalProperties: new validation_1.NumberType(),
          minProperties: 1
        }),
        costs: new validation_1.ObjectType({
          additionalProperties: new validation_1.NumberType(),
          minProperties: 1
        }),
        discount: new validation_1.NumberType({
          minimum: 0
        }),
        total: new validation_1.NumberType({
          minimum: 0
        }),
        coupon: new validation_1.StringType({
          minLength: 1,
          maxLength: 50
        }),
        paymentMethod: new validation_1.StringType({
          minLength: 1,
          maxLength: 50
        }),
        installments: new validation_1.NumberType({
          minimum: 1
        }),
        status: new validation_1.StringType({
          enumeration: ["placed", "paid", "complete"]
        })
      }
    });
  }
});

// node_modules/@croct/sdk/schema/evaluationSchemas.js
var require_evaluationSchemas = __commonJS({
  "node_modules/@croct/sdk/schema/evaluationSchemas.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.optionsSchema = void 0;
    var validation_1 = require_validation();
    exports.optionsSchema = new validation_1.ObjectType({
      properties: {
        timeout: new validation_1.NumberType({
          integer: true,
          minimum: 0
        }),
        attributes: new validation_1.JsonObjectType()
      }
    });
  }
});

// node_modules/@croct/sdk/schema/attributeSchema.js
var require_attributeSchema = __commonJS({
  "node_modules/@croct/sdk/schema/attributeSchema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.attributeNameSchema = void 0;
    var validation_1 = require_validation();
    exports.attributeNameSchema = new validation_1.StringType({
      maxLength: 50,
      format: "identifier"
    });
  }
});

// node_modules/@croct/sdk/schema/userSchema.js
var require_userSchema = __commonJS({
  "node_modules/@croct/sdk/schema/userSchema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.userProfileSchema = void 0;
    var validation_1 = require_validation();
    var attributeSchema_1 = require_attributeSchema();
    exports.userProfileSchema = new validation_1.ObjectType({
      properties: {
        firstName: new validation_1.StringType({
          minLength: 1,
          maxLength: 50
        }),
        lastName: new validation_1.StringType({
          minLength: 1,
          maxLength: 50
        }),
        birthDate: new validation_1.StringType({
          format: "date"
        }),
        gender: new validation_1.StringType({
          enumeration: ["male", "female", "neutral", "unknown"]
        }),
        email: new validation_1.StringType({
          minLength: 1,
          maxLength: 254
        }),
        alternateEmail: new validation_1.StringType({
          minLength: 1,
          maxLength: 254
        }),
        phone: new validation_1.StringType({
          minLength: 1,
          maxLength: 30
        }),
        alternatePhone: new validation_1.StringType({
          minLength: 1,
          maxLength: 30
        }),
        address: new validation_1.ObjectType({
          properties: {
            street: new validation_1.StringType({
              minLength: 1,
              maxLength: 100
            }),
            district: new validation_1.StringType({
              minLength: 1,
              maxLength: 100
            }),
            city: new validation_1.StringType({
              minLength: 1,
              maxLength: 100
            }),
            region: new validation_1.StringType({
              minLength: 1,
              maxLength: 100
            }),
            country: new validation_1.StringType({
              minLength: 1,
              maxLength: 100
            }),
            postalCode: new validation_1.StringType({
              minLength: 1,
              maxLength: 20
            })
          }
        }),
        avatar: new validation_1.StringType({
          maxLength: 500,
          format: "url"
        }),
        company: new validation_1.StringType({
          minLength: 1,
          maxLength: 200
        }),
        companyUrl: new validation_1.StringType({
          maxLength: 200,
          format: "url"
        }),
        jobTitle: new validation_1.StringType({
          minLength: 1,
          maxLength: 50
        }),
        interests: new validation_1.ArrayType({
          maxItems: 30,
          items: new validation_1.StringType({
            minLength: 1,
            maxLength: 30
          })
        }),
        activities: new validation_1.ArrayType({
          maxItems: 30,
          items: new validation_1.StringType({
            minLength: 1,
            maxLength: 30
          })
        }),
        custom: new validation_1.ObjectType({
          propertyNames: attributeSchema_1.attributeNameSchema,
          maxProperties: 10,
          additionalProperties: new validation_1.UnionType(new validation_1.BooleanType(), new validation_1.NullType(), new validation_1.NumberType(), new validation_1.StringType({
            maxLength: 100
          }), new validation_1.ArrayType({
            maxItems: 10,
            items: new validation_1.UnionType(new validation_1.BooleanType(), new validation_1.NullType(), new validation_1.NumberType(), new validation_1.StringType({
              maxLength: 100
            }), new validation_1.ArrayType({
              maxItems: 10,
              items: new validation_1.UnionType(new validation_1.BooleanType(), new validation_1.NullType(), new validation_1.NumberType(), new validation_1.StringType({
                maxLength: 100
              }))
            }), new validation_1.ObjectType({
              propertyNames: attributeSchema_1.attributeNameSchema,
              maxProperties: 10,
              additionalProperties: new validation_1.UnionType(new validation_1.BooleanType(), new validation_1.NullType(), new validation_1.NumberType(), new validation_1.StringType({
                maxLength: 100
              }))
            }))
          }), new validation_1.ObjectType({
            propertyNames: attributeSchema_1.attributeNameSchema,
            maxProperties: 10,
            additionalProperties: new validation_1.UnionType(new validation_1.BooleanType(), new validation_1.NullType(), new validation_1.NumberType(), new validation_1.StringType({
              maxLength: 100
            }), new validation_1.ArrayType({
              maxItems: 10,
              items: new validation_1.UnionType(new validation_1.BooleanType(), new validation_1.NullType(), new validation_1.NumberType(), new validation_1.StringType({
                maxLength: 100
              }))
            }), new validation_1.ObjectType({
              propertyNames: attributeSchema_1.attributeNameSchema,
              maxProperties: 10,
              additionalProperties: new validation_1.UnionType(new validation_1.BooleanType(), new validation_1.NullType(), new validation_1.NumberType(), new validation_1.StringType({
                maxLength: 100
              }))
            }))
          }))
        })
      }
    });
  }
});

// node_modules/@croct/sdk/schema/contentSchemas.js
var require_contentSchemas = __commonJS({
  "node_modules/@croct/sdk/schema/contentSchemas.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.postDetails = void 0;
    var validation_1 = require_validation();
    exports.postDetails = new validation_1.ObjectType({
      required: ["postId", "title", "publishTime"],
      properties: {
        postId: new validation_1.StringType({
          minLength: 1,
          maxLength: 100
        }),
        url: new validation_1.StringType({
          format: "url"
        }),
        title: new validation_1.StringType({
          minLength: 1,
          maxLength: 100
        }),
        tags: new validation_1.ArrayType({
          items: new validation_1.StringType({
            minLength: 1,
            maxLength: 50
          }),
          minItems: 1,
          maxItems: 10
        }),
        categories: new validation_1.ArrayType({
          items: new validation_1.StringType({
            minLength: 1,
            maxLength: 50
          }),
          minItems: 1,
          maxItems: 10
        }),
        authors: new validation_1.ArrayType({
          items: new validation_1.StringType({
            minLength: 1,
            maxLength: 50
          }),
          minItems: 1,
          maxItems: 10
        }),
        publishTime: new validation_1.NumberType(),
        updateTime: new validation_1.NumberType()
      }
    });
  }
});

// node_modules/@croct/sdk/schema/eventSchemas.js
var require_eventSchemas = __commonJS({
  "node_modules/@croct/sdk/schema/eventSchemas.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.eventOccurred = exports.linkOpened = exports.postViewed = exports.interestShown = exports.goalCompleted = exports.userSignedUp = exports.productViewed = exports.orderPlaced = exports.checkoutStarted = exports.cartViewed = exports.cartModified = void 0;
    var validation_1 = require_validation();
    var ecommerceSchemas_1 = require_ecommerceSchemas();
    var userSchema_1 = require_userSchema();
    var contentSchemas_1 = require_contentSchemas();
    exports.cartModified = new validation_1.ObjectType({
      required: ["cart"],
      properties: {
        cart: ecommerceSchemas_1.cart
      }
    });
    exports.cartViewed = new validation_1.ObjectType({
      required: ["cart"],
      properties: {
        cart: ecommerceSchemas_1.cart
      }
    });
    exports.checkoutStarted = new validation_1.ObjectType({
      required: ["cart"],
      properties: {
        cart: ecommerceSchemas_1.cart,
        orderId: new validation_1.StringType({
          minLength: 1,
          maxLength: 50
        })
      }
    });
    exports.orderPlaced = new validation_1.ObjectType({
      required: ["order"],
      properties: {
        order: ecommerceSchemas_1.order
      }
    });
    exports.productViewed = new validation_1.ObjectType({
      required: ["product"],
      properties: {
        product: ecommerceSchemas_1.productDetails
      }
    });
    exports.userSignedUp = new validation_1.ObjectType({
      required: ["userId"],
      properties: {
        userId: new validation_1.StringType({
          minLength: 1,
          maxLength: 254
        }),
        profile: userSchema_1.userProfileSchema
      }
    });
    exports.goalCompleted = new validation_1.ObjectType({
      required: ["goalId"],
      properties: {
        goalId: new validation_1.StringType({
          minLength: 1,
          maxLength: 50
        }),
        value: new validation_1.NumberType({
          minimum: 0
        }),
        currency: new validation_1.StringType({
          minLength: 1,
          maxLength: 10
        })
      }
    });
    exports.interestShown = new validation_1.ObjectType({
      required: ["interests"],
      properties: {
        interests: new validation_1.ArrayType({
          items: new validation_1.StringType({
            minLength: 1,
            maxLength: 50
          }),
          minItems: 1,
          maxItems: 10
        })
      }
    });
    exports.postViewed = new validation_1.ObjectType({
      required: ["post"],
      properties: {
        post: contentSchemas_1.postDetails
      }
    });
    exports.linkOpened = new validation_1.ObjectType({
      required: ["link"],
      properties: {
        link: new validation_1.StringType({
          format: "uri-reference"
        })
      }
    });
    exports.eventOccurred = new validation_1.ObjectType({
      required: ["name"],
      properties: {
        name: new validation_1.StringType({
          minLength: 1,
          maxLength: 50
        }),
        testId: new validation_1.StringType({
          minLength: 1,
          maxLength: 50
        }),
        groupId: new validation_1.StringType({
          minLength: 1,
          maxLength: 50
        }),
        personalizationId: new validation_1.StringType({
          minLength: 1,
          maxLength: 50
        }),
        audience: new validation_1.StringType({
          minLength: 1,
          maxLength: 50
        }),
        details: new validation_1.ObjectType({
          additionalProperties: new validation_1.UnionType(new validation_1.NullType(), new validation_1.BooleanType(), new validation_1.NumberType(), new validation_1.StringType({
            maxLength: 300
          })),
          propertyNames: new validation_1.StringType({
            minLength: 1,
            maxLength: 20,
            format: "identifier"
          }),
          maxProperties: 10
        })
      }
    });
  }
});

// node_modules/@croct/sdk/schema/loggerSchema.js
var require_loggerSchema = __commonJS({
  "node_modules/@croct/sdk/schema/loggerSchema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loggerSchema = void 0;
    var validation_1 = require_validation();
    exports.loggerSchema = new validation_1.ObjectType({
      required: ["debug", "info", "warn", "error"],
      additionalProperties: true,
      properties: {
        debug: new validation_1.FunctionType(),
        info: new validation_1.FunctionType(),
        warn: new validation_1.FunctionType(),
        error: new validation_1.FunctionType()
      }
    });
  }
});

// node_modules/@croct/sdk/schema/operationSchemas.js
var require_operationSchemas = __commonJS({
  "node_modules/@croct/sdk/schema/operationSchemas.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.removeOperation = exports.unsetOperation = exports.clearOperation = exports.incrementOperation = exports.decrementOperation = exports.mergeOperation = exports.combineOperation = exports.setOperation = exports.addOperation = void 0;
    var validation_1 = require_validation();
    var attributeSchema_1 = require_attributeSchema();
    var pointer = new validation_1.StringType({
      format: "pointer"
    });
    var simpleArray = new validation_1.JsonArrayType({
      items: new validation_1.JsonPrimitiveType()
    });
    var simpleMap = new validation_1.JsonObjectType({
      properties: new validation_1.JsonPrimitiveType(),
      propertyNames: attributeSchema_1.attributeNameSchema
    });
    var complexMap = new validation_1.JsonObjectType({
      properties: new validation_1.UnionType(new validation_1.JsonPrimitiveType(), simpleArray, simpleMap),
      propertyNames: attributeSchema_1.attributeNameSchema
    });
    var collectionValue = new validation_1.UnionType(simpleArray, complexMap);
    var mixedValue = new validation_1.UnionType(new validation_1.JsonPrimitiveType(), simpleArray, complexMap);
    exports.addOperation = new validation_1.ObjectType({
      required: ["path", "value"],
      properties: {
        path: pointer,
        value: mixedValue
      }
    });
    exports.setOperation = new validation_1.ObjectType({
      required: ["path", "value"],
      properties: {
        path: pointer,
        value: mixedValue
      }
    });
    exports.combineOperation = new validation_1.ObjectType({
      required: ["path", "value"],
      properties: {
        path: pointer,
        value: mixedValue
      }
    });
    exports.mergeOperation = new validation_1.ObjectType({
      required: ["path", "value"],
      properties: {
        path: pointer,
        value: collectionValue
      }
    });
    exports.decrementOperation = new validation_1.ObjectType({
      required: ["path", "value"],
      properties: {
        path: pointer,
        value: new validation_1.NumberType()
      }
    });
    exports.incrementOperation = new validation_1.ObjectType({
      required: ["path", "value"],
      properties: {
        path: pointer,
        value: new validation_1.NumberType()
      }
    });
    exports.clearOperation = new validation_1.ObjectType({
      required: ["path"],
      properties: {
        path: pointer
      }
    });
    exports.unsetOperation = new validation_1.ObjectType({
      required: ["path"],
      properties: {
        path: pointer
      }
    });
    exports.removeOperation = new validation_1.ObjectType({
      required: ["path", "value"],
      properties: {
        path: pointer,
        value: mixedValue
      }
    });
  }
});

// node_modules/@croct/sdk/schema/sdkSchemas.js
var require_sdkSchemas = __commonJS({
  "node_modules/@croct/sdk/schema/sdkSchemas.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sdkConfigurationSchema = exports.eventMetadataSchema = void 0;
    var validation_1 = require_validation();
    var contextSchemas_1 = require_contextSchemas();
    var loggerSchema_1 = require_loggerSchema();
    exports.eventMetadataSchema = new validation_1.ObjectType({
      maxProperties: 5,
      propertyNames: new validation_1.StringType({
        minLength: 1,
        maxLength: 20,
        format: "identifier"
      }),
      additionalProperties: new validation_1.StringType({
        maxLength: 300
      })
    });
    exports.sdkConfigurationSchema = new validation_1.ObjectType({
      required: ["appId"],
      properties: {
        appId: new validation_1.StringType({
          format: "uuid"
        }),
        cid: new validation_1.StringType({
          pattern: /^[0-9a-f]{32}$/i
        }),
        tokenScope: contextSchemas_1.tokenScopeSchema,
        trackerEndpointUrl: new validation_1.StringType({
          format: "url"
        }),
        evaluationEndpointUrl: new validation_1.StringType({
          format: "url"
        }),
        bootstrapEndpointUrl: new validation_1.StringType({
          format: "url"
        }),
        beaconQueueSize: new validation_1.NumberType({
          minimum: 0,
          integer: true
        }),
        debug: new validation_1.BooleanType(),
        test: new validation_1.BooleanType(),
        logger: loggerSchema_1.loggerSchema,
        urlSanitizer: new validation_1.FunctionType(),
        eventMetadata: exports.eventMetadataSchema
      }
    });
  }
});

// node_modules/@croct/sdk/schema/sdkFacadeSchemas.js
var require_sdkFacadeSchemas = __commonJS({
  "node_modules/@croct/sdk/schema/sdkFacadeSchemas.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sdkFacadeConfigurationSchema = void 0;
    var validation_1 = require_validation();
    var contextSchemas_1 = require_contextSchemas();
    var sdkSchemas_1 = require_sdkSchemas();
    var loggerSchema_1 = require_loggerSchema();
    exports.sdkFacadeConfigurationSchema = new validation_1.ObjectType({
      required: ["appId"],
      properties: {
        appId: new validation_1.StringType({
          format: "uuid"
        }),
        cid: new validation_1.StringType({
          pattern: /^[0-9a-f]{32}$/i
        }),
        tokenScope: contextSchemas_1.tokenScopeSchema,
        debug: new validation_1.BooleanType(),
        test: new validation_1.BooleanType(),
        track: new validation_1.BooleanType(),
        logger: loggerSchema_1.loggerSchema,
        urlSanitizer: new validation_1.FunctionType(),
        eventMetadata: sdkSchemas_1.eventMetadataSchema,
        userId: new validation_1.StringType({
          minLength: 1
        }),
        token: new validation_1.UnionType(new validation_1.StringType({
          pattern: /^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$/
        }), new validation_1.NullType()),
        trackerEndpointUrl: new validation_1.StringType({
          format: "url"
        }),
        evaluationEndpointUrl: new validation_1.StringType({
          format: "url"
        }),
        bootstrapEndpointUrl: new validation_1.StringType({
          format: "url"
        })
      }
    });
  }
});

// node_modules/@croct/sdk/schema/tokenSchema.js
var require_tokenSchema = __commonJS({
  "node_modules/@croct/sdk/schema/tokenSchema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokenSchema = void 0;
    var validation_1 = require_validation();
    exports.tokenSchema = new validation_1.ObjectType({
      required: ["headers", "claims"],
      properties: {
        headers: new validation_1.ObjectType({
          required: ["typ", "alg", "appId"],
          properties: {
            typ: new validation_1.StringType(),
            alg: new validation_1.StringType(),
            kid: new validation_1.StringType(),
            appId: new validation_1.StringType({
              format: "uuid"
            })
          }
        }),
        claims: new validation_1.ObjectType({
          required: ["iss", "aud", "iat"],
          properties: {
            iss: new validation_1.StringType(),
            aud: new validation_1.UnionType(new validation_1.StringType(), new validation_1.ArrayType({ items: new validation_1.StringType() })),
            iat: new validation_1.NumberType({
              minimum: 0
            }),
            sub: new validation_1.StringType({
              minLength: 1
            }),
            exp: new validation_1.NumberType({
              minimum: 0
            }),
            jti: new validation_1.StringType({
              format: "uuid"
            })
          }
        }),
        signature: new validation_1.StringType()
      }
    });
  }
});

// node_modules/@croct/sdk/schema/index.js
var require_schema2 = __commonJS({
  "node_modules/@croct/sdk/schema/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_contextSchemas(), exports);
    tslib_1.__exportStar(require_ecommerceSchemas(), exports);
    tslib_1.__exportStar(require_evaluationSchemas(), exports);
    tslib_1.__exportStar(require_eventSchemas(), exports);
    tslib_1.__exportStar(require_loggerSchema(), exports);
    tslib_1.__exportStar(require_operationSchemas(), exports);
    tslib_1.__exportStar(require_sdkFacadeSchemas(), exports);
    tslib_1.__exportStar(require_sdkSchemas(), exports);
    tslib_1.__exportStar(require_tokenSchema(), exports);
    tslib_1.__exportStar(require_userSchema(), exports);
  }
});

// node_modules/@croct/sdk/error.js
var require_error = __commonJS({
  "node_modules/@croct/sdk/error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.formatCause = exports.formatMessage = void 0;
    function extractMessage(error) {
      if (error instanceof Error) {
        return error.message;
      }
      if (typeof error === "string" && error !== "") {
        return error;
      }
      return "unknown error";
    }
    function formatMessage(error) {
      var message = extractMessage(error);
      if (message.length === 0) {
        return message;
      }
      return message.charAt(0).toUpperCase() + message.slice(1);
    }
    exports.formatMessage = formatMessage;
    function formatCause(error) {
      var message = formatMessage(error);
      if (message.length === 0) {
        return message;
      }
      return message.charAt(0).toLowerCase() + message.slice(1);
    }
    exports.formatCause = formatCause;
  }
});

// node_modules/@croct/sdk/facade/evaluatorFacade.js
var require_evaluatorFacade = __commonJS({
  "node_modules/@croct/sdk/facade/evaluatorFacade.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TabContextFactory = exports.MinimalContextFactory = exports.EvaluatorFacade = void 0;
    var tslib_1 = require_tslib();
    var schema_1 = require_schema2();
    var error_1 = require_error();
    function validate(options) {
      if (typeof options !== "object" || options === null) {
        throw new Error("The options must be an object.");
      }
      try {
        schema_1.optionsSchema.validate(options);
      } catch (violation) {
        throw new Error("Invalid options: ".concat((0, error_1.formatCause)(violation)));
      }
    }
    var EvaluatorFacade = function() {
      function EvaluatorFacade2(evaluator, contextFactory) {
        this.evaluator = evaluator;
        this.contextFactory = contextFactory;
      }
      EvaluatorFacade2.prototype.evaluate = function(expression, options) {
        if (options === void 0) {
          options = {};
        }
        if (typeof expression !== "string" || expression.length === 0) {
          throw new Error("The expression must be a non-empty string.");
        }
        validate(options);
        return this.evaluator.evaluate(expression, {
          timeout: options.timeout,
          context: this.contextFactory.createContext(options.attributes)
        });
      };
      return EvaluatorFacade2;
    }();
    exports.EvaluatorFacade = EvaluatorFacade;
    var MinimalContextFactory = function() {
      function MinimalContextFactory2() {
      }
      MinimalContextFactory2.prototype.createContext = function(attributes) {
        if (attributes === void 0) {
          return {};
        }
        return { attributes };
      };
      return MinimalContextFactory2;
    }();
    exports.MinimalContextFactory = MinimalContextFactory;
    var TabContextFactory = function() {
      function TabContextFactory2(tab) {
        this.tab = tab;
      }
      TabContextFactory2.prototype.createContext = function(attributes) {
        var url = new URL(this.tab.url);
        var context = {};
        var page = {
          title: this.tab.title,
          url: url.toString()
        };
        var referrer = this.tab.referrer;
        if (referrer.length > 0) {
          page.referrer = referrer;
        }
        context.page = page;
        var timezone = Intl.DateTimeFormat().resolvedOptions().timeZone || null;
        if (timezone !== null) {
          context.timezone = timezone;
        }
        var campaign = TabContextFactory2.createCampaign(url);
        if (Object.keys(campaign).length > 0) {
          context.campaign = campaign;
        }
        if (attributes !== void 0 && Object.keys(attributes).length > 0) {
          context.attributes = attributes;
        }
        return context;
      };
      TabContextFactory2.createCampaign = function(url) {
        var e_1, _a;
        var campaign = {};
        try {
          for (var _b = tslib_1.__values(url.searchParams.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = tslib_1.__read(_c.value, 2), parameter = _d[0], value = _d[1];
            switch (parameter.toLowerCase()) {
              case "utm_campaign":
                campaign.name = value;
                break;
              case "utm_source":
                campaign.source = value;
                break;
              case "utm_term":
                campaign.term = value;
                break;
              case "utm_medium":
                campaign.medium = value;
                break;
              case "utm_content":
                campaign.content = value;
                break;
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        return campaign;
      };
      return TabContextFactory2;
    }();
    exports.TabContextFactory = TabContextFactory;
  }
});

// node_modules/@croct/sdk/facade/trackerFacade.js
var require_trackerFacade = __commonJS({
  "node_modules/@croct/sdk/facade/trackerFacade.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TrackerFacade = void 0;
    var tslib_1 = require_tslib();
    var error_1 = require_error();
    var schema_1 = require_schema2();
    var eventSchemas = {
      cartViewed: schema_1.cartViewed,
      cartModified: schema_1.cartModified,
      checkoutStarted: schema_1.checkoutStarted,
      orderPlaced: schema_1.orderPlaced,
      productViewed: schema_1.productViewed,
      userSignedUp: schema_1.userSignedUp,
      eventOccurred: schema_1.eventOccurred,
      interestShown: schema_1.interestShown,
      postViewed: schema_1.postViewed,
      goalCompleted: schema_1.goalCompleted,
      linkOpened: schema_1.linkOpened
    };
    function createEvent(type, payload) {
      if (typeof type !== "string") {
        throw new Error("The event type must of type string.");
      }
      if (typeof payload !== "object" || payload == null) {
        throw new Error("The event payload must of type object.");
      }
      var event = tslib_1.__assign({ type }, payload);
      validateEvent(event);
      return event;
    }
    function validateEvent(event) {
      var type = event.type, payload = tslib_1.__rest(event, ["type"]);
      if (!(type in eventSchemas)) {
        throw new Error("Unknown event type '".concat(type, "'."));
      }
      try {
        eventSchemas[type].validate(payload);
      } catch (violation) {
        throw new Error("Invalid event payload: ".concat((0, error_1.formatCause)(violation)));
      }
    }
    var TrackerFacade = function() {
      function TrackerFacade2(tracker) {
        this.tracker = tracker;
      }
      Object.defineProperty(TrackerFacade2.prototype, "flushed", {
        get: function() {
          return this.tracker.flushed;
        },
        enumerable: false,
        configurable: true
      });
      TrackerFacade2.prototype.enable = function() {
        this.tracker.enable();
      };
      TrackerFacade2.prototype.disable = function() {
        this.tracker.disable();
      };
      TrackerFacade2.prototype.addListener = function(listener) {
        this.tracker.addListener(listener);
      };
      TrackerFacade2.prototype.removeListener = function(listener) {
        this.tracker.removeListener(listener);
      };
      TrackerFacade2.prototype.track = function(type, payload) {
        return this.tracker.track(createEvent(type, payload));
      };
      return TrackerFacade2;
    }();
    exports.TrackerFacade = TrackerFacade;
  }
});

// node_modules/@croct/sdk/activeRecord.js
var require_activeRecord = __commonJS({
  "node_modules/@croct/sdk/activeRecord.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActiveRecord = void 0;
    var tslib_1 = require_tslib();
    var schema_1 = require_schema2();
    var operationSchema = {
      add: schema_1.addOperation,
      set: schema_1.setOperation,
      merge: schema_1.mergeOperation,
      combine: schema_1.combineOperation,
      increment: schema_1.incrementOperation,
      decrement: schema_1.decrementOperation,
      clear: schema_1.clearOperation,
      unset: schema_1.unsetOperation,
      remove: schema_1.removeOperation
    };
    var ActiveRecord = function() {
      function ActiveRecord2() {
        this.operations = [];
      }
      ActiveRecord2.prototype.set = function(propertyOrValue, value) {
        if (typeof propertyOrValue === "string") {
          return this.pushOperation({
            type: "set",
            path: propertyOrValue,
            value
          });
        }
        return this.pushOperation({
          type: "set",
          path: ".",
          value: propertyOrValue
        });
      };
      ActiveRecord2.prototype.add = function(property, value) {
        return this.pushOperation({
          type: "add",
          path: property,
          value
        });
      };
      ActiveRecord2.prototype.combine = function(property, value) {
        return this.pushOperation({
          type: "combine",
          path: property,
          value
        });
      };
      ActiveRecord2.prototype.merge = function(propertyOrValue, value) {
        if (typeof propertyOrValue === "string") {
          return this.pushOperation({
            type: "merge",
            path: propertyOrValue,
            value
          });
        }
        return this.pushOperation({
          type: "merge",
          path: ".",
          value: propertyOrValue
        });
      };
      ActiveRecord2.prototype.increment = function(property, amount) {
        if (amount === void 0) {
          amount = 1;
        }
        return this.pushOperation({
          type: "increment",
          path: property,
          value: amount
        });
      };
      ActiveRecord2.prototype.decrement = function(property, amount) {
        if (amount === void 0) {
          amount = 1;
        }
        return this.pushOperation({
          type: "decrement",
          path: property,
          value: amount
        });
      };
      ActiveRecord2.prototype.clear = function(property) {
        return this.pushOperation({
          type: "clear",
          path: property
        });
      };
      ActiveRecord2.prototype.unset = function(property) {
        return this.pushOperation({
          type: "unset",
          path: property
        });
      };
      ActiveRecord2.prototype.remove = function(property, value) {
        return this.pushOperation({
          type: "remove",
          path: property,
          value
        });
      };
      ActiveRecord2.prototype.pushOperation = function(operation) {
        var type = operation.type, data = tslib_1.__rest(operation, ["type"]);
        operationSchema[type].validate(data);
        this.operations.push(operation);
        return this;
      };
      ActiveRecord2.prototype.reset = function() {
        this.operations.splice(0);
        return this;
      };
      ActiveRecord2.prototype.isDirty = function() {
        return this.operations.length > 0;
      };
      ActiveRecord2.prototype.buildPatch = function() {
        return { operations: this.operations.slice() };
      };
      return ActiveRecord2;
    }();
    exports.ActiveRecord = ActiveRecord;
  }
});

// node_modules/@croct/sdk/facade/userPatch.js
var require_userPatch = __commonJS({
  "node_modules/@croct/sdk/facade/userPatch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UserPatch = void 0;
    var tslib_1 = require_tslib();
    var activeRecord_1 = require_activeRecord();
    var UserPatch = function(_super) {
      tslib_1.__extends(UserPatch2, _super);
      function UserPatch2(tracker) {
        var _this = _super.call(this) || this;
        _this.tracker = tracker;
        return _this;
      }
      UserPatch2.prototype.save = function() {
        if (!this.isDirty()) {
          return Promise.resolve({
            type: "userProfileChanged",
            patch: { operations: [] }
          });
        }
        var promise = this.tracker.track({
          type: "userProfileChanged",
          patch: this.buildPatch()
        });
        this.reset();
        return promise;
      };
      return UserPatch2;
    }(activeRecord_1.ActiveRecord);
    exports.UserPatch = UserPatch;
  }
});

// node_modules/@croct/sdk/facade/userFacade.js
var require_userFacade = __commonJS({
  "node_modules/@croct/sdk/facade/userFacade.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UserFacade = void 0;
    var userPatch_1 = require_userPatch();
    var UserFacade = function() {
      function UserFacade2(context, tracker) {
        this.context = context;
        this.tracker = tracker;
      }
      UserFacade2.prototype.isIdentified = function() {
        return !this.isAnonymous();
      };
      UserFacade2.prototype.isAnonymous = function() {
        return this.context.isAnonymous();
      };
      UserFacade2.prototype.edit = function() {
        return new userPatch_1.UserPatch(this.tracker);
      };
      return UserFacade2;
    }();
    exports.UserFacade = UserFacade;
  }
});

// node_modules/@croct/sdk/base64Url.js
var require_base64Url = __commonJS({
  "node_modules/@croct/sdk/base64Url.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.base64UrlDecode = exports.base64UrlEncode = void 0;
    function base64Unescape(value) {
      return (value + "===".slice((value.length + 3) % 4)).replace(/-/g, "+").replace(/_/g, "/");
    }
    function base64Escape(value) {
      return value.replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
    }
    function base64UrlEncode(value) {
      return base64Escape(window.btoa(value));
    }
    exports.base64UrlEncode = base64UrlEncode;
    function base64UrlDecode(value) {
      return window.atob(base64Unescape(value));
    }
    exports.base64UrlDecode = base64UrlDecode;
  }
});

// node_modules/@croct/sdk/token/token.js
var require_token = __commonJS({
  "node_modules/@croct/sdk/token/token.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FixedTokenProvider = exports.Token = void 0;
    var tslib_1 = require_tslib();
    var base64Url_1 = require_base64Url();
    var schema_1 = require_schema2();
    var error_1 = require_error();
    var Token = function() {
      function Token2(headers, claims, signature) {
        if (signature === void 0) {
          signature = "";
        }
        this.headers = headers;
        this.claims = claims;
        this.signature = signature;
      }
      Token2.issue = function(appId, subject, timestamp) {
        if (subject === void 0) {
          subject = null;
        }
        if (timestamp === void 0) {
          timestamp = Math.floor(Date.now() / 1e3);
        }
        if (timestamp < 0) {
          throw new Error("The timestamp must be non-negative.");
        }
        if (subject === "") {
          throw new Error("The subject must be non-empty.");
        }
        return new Token2({
          typ: "JWT",
          alg: "none",
          appId
        }, tslib_1.__assign({ iss: "croct.io", aud: "croct.io", iat: timestamp }, subject !== null ? { sub: subject } : null));
      };
      Token2.parse = function(token) {
        if (token === "") {
          throw new Error("The token cannot be empty.");
        }
        var parts = token.split(".", 3);
        if (parts.length < 2) {
          throw new Error("The token is malformed.");
        }
        var headers;
        var claims;
        var signature;
        try {
          headers = JSON.parse((0, base64Url_1.base64UrlDecode)(parts[0]));
          claims = JSON.parse((0, base64Url_1.base64UrlDecode)(parts[1]));
          if (parts.length === 3) {
            signature = (0, base64Url_1.base64UrlDecode)(parts[2]);
          }
        } catch (_a) {
          throw new Error("The token is corrupted.");
        }
        try {
          schema_1.tokenSchema.validate({ headers, claims, signature });
        } catch (violation) {
          throw new Error("The token is invalid: ".concat((0, error_1.formatCause)(violation)));
        }
        return new Token2(headers, claims, signature);
      };
      Token2.prototype.getHeaders = function() {
        return tslib_1.__assign({}, this.headers);
      };
      Token2.prototype.getClaims = function() {
        return tslib_1.__assign({}, this.claims);
      };
      Token2.prototype.getSignature = function() {
        return this.signature;
      };
      Token2.prototype.isAnonymous = function() {
        return this.claims.sub === void 0;
      };
      Token2.prototype.getSubject = function() {
        return this.claims.sub !== void 0 ? this.claims.sub : null;
      };
      Token2.prototype.getIssueTime = function() {
        return this.claims.iat;
      };
      Token2.prototype.toJSON = function() {
        return this.toString();
      };
      Token2.prototype.toString = function() {
        var headers = (0, base64Url_1.base64UrlEncode)(JSON.stringify(this.headers));
        var claims = (0, base64Url_1.base64UrlEncode)(JSON.stringify(this.claims));
        var signature = (0, base64Url_1.base64UrlEncode)(this.signature);
        return "".concat(headers, ".").concat(claims, ".").concat(signature);
      };
      return Token2;
    }();
    exports.Token = Token;
    var FixedTokenProvider = function() {
      function FixedTokenProvider2(token) {
        this.token = token;
      }
      FixedTokenProvider2.prototype.getToken = function() {
        return this.token;
      };
      return FixedTokenProvider2;
    }();
    exports.FixedTokenProvider = FixedTokenProvider;
  }
});

// node_modules/@croct/sdk/token/cachedTokenStore.js
var require_cachedTokenStore = __commonJS({
  "node_modules/@croct/sdk/token/cachedTokenStore.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CachedTokenStore = void 0;
    var token_1 = require_token();
    var CachedTokenStore = function() {
      function CachedTokenStore2(cache) {
        this.cache = cache;
      }
      CachedTokenStore2.prototype.getToken = function() {
        var data = this.cache.get();
        if (data === null) {
          return null;
        }
        try {
          return token_1.Token.parse(data);
        } catch (error) {
          return null;
        }
      };
      CachedTokenStore2.prototype.setToken = function(token) {
        if (token === null) {
          this.cache.clear();
          return;
        }
        this.cache.put(token.toString());
      };
      return CachedTokenStore2;
    }();
    exports.CachedTokenStore = CachedTokenStore;
  }
});

// node_modules/@croct/sdk/token/inMemoryTokenStore.js
var require_inMemoryTokenStore = __commonJS({
  "node_modules/@croct/sdk/token/inMemoryTokenStore.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InMemoryTokenStore = void 0;
    var InMemoryTokenStore = function() {
      function InMemoryTokenStore2() {
        this.token = null;
      }
      InMemoryTokenStore2.prototype.getToken = function() {
        return this.token;
      };
      InMemoryTokenStore2.prototype.setToken = function(token) {
        this.token = token;
      };
      return InMemoryTokenStore2;
    }();
    exports.InMemoryTokenStore = InMemoryTokenStore;
  }
});

// node_modules/@croct/sdk/token/replicatedTokenStore.js
var require_replicatedTokenStore = __commonJS({
  "node_modules/@croct/sdk/token/replicatedTokenStore.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReplicatedTokenStore = void 0;
    var ReplicatedTokenStore = function() {
      function ReplicatedTokenStore2(primary, secondary) {
        this.primary = primary;
        this.secondary = secondary;
      }
      ReplicatedTokenStore2.prototype.getToken = function() {
        return this.primary.getToken();
      };
      ReplicatedTokenStore2.prototype.setToken = function(token) {
        this.primary.setToken(token);
        this.secondary.setToken(token);
      };
      return ReplicatedTokenStore2;
    }();
    exports.ReplicatedTokenStore = ReplicatedTokenStore;
  }
});

// node_modules/@croct/sdk/token/index.js
var require_token2 = __commonJS({
  "node_modules/@croct/sdk/token/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReplicatedTokenStore = exports.InMemoryTokenStore = exports.CachedTokenStore = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_token(), exports);
    var cachedTokenStore_1 = require_cachedTokenStore();
    Object.defineProperty(exports, "CachedTokenStore", { enumerable: true, get: function() {
      return cachedTokenStore_1.CachedTokenStore;
    } });
    var inMemoryTokenStore_1 = require_inMemoryTokenStore();
    Object.defineProperty(exports, "InMemoryTokenStore", { enumerable: true, get: function() {
      return inMemoryTokenStore_1.InMemoryTokenStore;
    } });
    var replicatedTokenStore_1 = require_replicatedTokenStore();
    Object.defineProperty(exports, "ReplicatedTokenStore", { enumerable: true, get: function() {
      return replicatedTokenStore_1.ReplicatedTokenStore;
    } });
  }
});

// node_modules/@croct/sdk/logging/logger.js
var require_logger = __commonJS({
  "node_modules/@croct/sdk/logging/logger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@croct/sdk/logging/consoleLogger.js
var require_consoleLogger = __commonJS({
  "node_modules/@croct/sdk/logging/consoleLogger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConsoleLogger = void 0;
    var ConsoleLogger = function() {
      function ConsoleLogger2(namespace) {
        this.namespace = namespace;
      }
      Object.defineProperty(ConsoleLogger2.prototype, "debug", {
        get: function() {
          return this.bind(window.console.debug);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(ConsoleLogger2.prototype, "info", {
        get: function() {
          return this.bind(window.console.info);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(ConsoleLogger2.prototype, "warn", {
        get: function() {
          return this.bind(window.console.warn);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(ConsoleLogger2.prototype, "error", {
        get: function() {
          return this.bind(window.console.error);
        },
        enumerable: false,
        configurable: true
      });
      ConsoleLogger2.prototype.bind = function(method) {
        if (this.namespace !== void 0) {
          return method.bind(window.console, "[".concat(this.namespace, "]"));
        }
        return method.bind(window.console);
      };
      return ConsoleLogger2;
    }();
    exports.ConsoleLogger = ConsoleLogger;
  }
});

// node_modules/@croct/sdk/logging/namespacedLogger.js
var require_namespacedLogger = __commonJS({
  "node_modules/@croct/sdk/logging/namespacedLogger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NamespacedLogger = void 0;
    var NamespacedLogger = function() {
      function NamespacedLogger2(logger, namespace) {
        this.logger = logger;
        this.namespace = namespace;
      }
      NamespacedLogger2.prototype.debug = function(message) {
        this.logger.debug(this.format(message));
      };
      NamespacedLogger2.prototype.info = function(message) {
        this.logger.info(this.format(message));
      };
      NamespacedLogger2.prototype.warn = function(message) {
        this.logger.warn(this.format(message));
      };
      NamespacedLogger2.prototype.error = function(message) {
        this.logger.error(this.format(message));
      };
      NamespacedLogger2.prototype.format = function(message) {
        return "[".concat(this.namespace, "] ").concat(message);
      };
      return NamespacedLogger2;
    }();
    exports.NamespacedLogger = NamespacedLogger;
  }
});

// node_modules/@croct/sdk/logging/nullLogger.js
var require_nullLogger = __commonJS({
  "node_modules/@croct/sdk/logging/nullLogger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NullLogger = void 0;
    var NullLogger = function() {
      function NullLogger2() {
      }
      NullLogger2.prototype.debug = function() {
      };
      NullLogger2.prototype.info = function() {
      };
      NullLogger2.prototype.warn = function() {
      };
      NullLogger2.prototype.error = function() {
      };
      return NullLogger2;
    }();
    exports.NullLogger = NullLogger;
  }
});

// node_modules/@croct/sdk/logging/index.js
var require_logging = __commonJS({
  "node_modules/@croct/sdk/logging/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NullLogger = exports.NamespacedLogger = exports.ConsoleLogger = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_logger(), exports);
    var consoleLogger_1 = require_consoleLogger();
    Object.defineProperty(exports, "ConsoleLogger", { enumerable: true, get: function() {
      return consoleLogger_1.ConsoleLogger;
    } });
    var namespacedLogger_1 = require_namespacedLogger();
    Object.defineProperty(exports, "NamespacedLogger", { enumerable: true, get: function() {
      return namespacedLogger_1.NamespacedLogger;
    } });
    var nullLogger_1 = require_nullLogger();
    Object.defineProperty(exports, "NullLogger", { enumerable: true, get: function() {
      return nullLogger_1.NullLogger;
    } });
  }
});

// node_modules/@croct/sdk/eventManager.js
var require_eventManager = __commonJS({
  "node_modules/@croct/sdk/eventManager.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SynchronousEventManager = void 0;
    var SynchronousEventManager = function() {
      function SynchronousEventManager2() {
        this.listeners = {};
      }
      SynchronousEventManager2.prototype.addListener = function(type, listener) {
        var _a;
        var listeners = (_a = this.listeners[type]) !== null && _a !== void 0 ? _a : [];
        listeners.push(listener);
        this.listeners[type] = listeners;
      };
      SynchronousEventManager2.prototype.removeListener = function(eventName, listener) {
        var listeners = this.listeners[eventName];
        if (listeners === void 0) {
          return;
        }
        var index = listeners.indexOf(listener);
        if (index >= 0) {
          listeners.splice(index, 1);
        }
      };
      SynchronousEventManager2.prototype.dispatch = function(eventName, event) {
        var listeners = this.listeners[eventName];
        if (listeners !== void 0) {
          listeners.forEach(function(listener) {
            return listener(event);
          });
        }
      };
      return SynchronousEventManager2;
    }();
    exports.SynchronousEventManager = SynchronousEventManager;
  }
});

// node_modules/@croct/sdk/tab.js
var require_tab = __commonJS({
  "node_modules/@croct/sdk/tab.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Tab = void 0;
    var eventManager_1 = require_eventManager();
    var EventMap = {
      focus: "focus",
      blur: "blur",
      beforeunload: "unload",
      DOMContentLoaded: "load",
      visibilitychange: "visibilityChange"
    };
    var Tab = function() {
      function Tab2(id, isNew, urlSanitizer) {
        this.eventManager = new eventManager_1.SynchronousEventManager();
        this.id = id;
        this.isNew = isNew;
        this.urlSanitizer = urlSanitizer;
        this.initialize();
      }
      Tab2.prototype.initialize = function() {
        var _this = this;
        var listener = function(event) {
          _this.emit(EventMap[event.type], new CustomEvent(EventMap[event.type], { detail: { tab: _this } }));
        };
        window.addEventListener("focus", listener, true);
        window.addEventListener("blur", listener, true);
        window.addEventListener("beforeunload", listener, true);
        window.addEventListener("DOMContentLoaded", listener, true);
        document.addEventListener("visibilitychange", function() {
          _this.emit("visibilityChange", new CustomEvent("visibilityChange", {
            detail: {
              tab: _this,
              visible: _this.isVisible
            }
          }));
        }, true);
        Tab2.addUrlChangeListener(function(url) {
          _this.emit("urlChange", new CustomEvent("urlChange", { detail: { tab: _this, url: _this.sanitizeUrl(url) } }));
        });
      };
      Object.defineProperty(Tab2.prototype, "url", {
        get: function() {
          return this.sanitizeUrl(window.location.href);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Tab2.prototype, "title", {
        get: function() {
          return document.title;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Tab2.prototype, "referrer", {
        get: function() {
          return document.referrer === "" ? "" : this.sanitizeUrl(document.referrer);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Tab2.prototype, "isVisible", {
        get: function() {
          return document.visibilityState === "visible";
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Tab2.prototype, "document", {
        get: function() {
          return document;
        },
        enumerable: false,
        configurable: true
      });
      Tab2.prototype.addListener = function(type, listener) {
        this.eventManager.addListener(type, listener);
      };
      Tab2.prototype.removeListener = function(type, listener) {
        this.eventManager.removeListener(type, listener);
      };
      Tab2.prototype.sanitizeUrl = function(url) {
        var normalized = window.encodeURI(window.decodeURI(url));
        if (this.urlSanitizer !== void 0) {
          return this.urlSanitizer(normalized).toString();
        }
        return normalized;
      };
      Tab2.prototype.emit = function(type, event) {
        this.eventManager.dispatch(type, event);
      };
      Tab2.addUrlChangeListener = function(listener) {
        var url = window.location.href;
        var updateUrl = function() {
          var currentUrl = window.location.href;
          if (url !== currentUrl) {
            listener(currentUrl);
            url = currentUrl;
          }
        };
        var pushState = window.history.pushState;
        window.history.pushState = function interceptPushState() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          var result = pushState.apply(window.history, args);
          updateUrl();
          return result;
        };
        var replaceState = window.history.replaceState;
        window.history.replaceState = function interceptReplaceState() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          var result = replaceState.apply(window.history, args);
          updateUrl();
          return result;
        };
        window.addEventListener("popstate", updateUrl, true);
      };
      return Tab2;
    }();
    exports.Tab = Tab;
  }
});

// node_modules/@croct/sdk/uuid.js
var require_uuid = __commonJS({
  "node_modules/@croct/sdk/uuid.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uuid4 = void 0;
    function uuid4(sortable) {
      if (sortable === void 0) {
        sortable = false;
      }
      var uuid = "";
      if (sortable) {
        var prefix = Date.now().toString(16).padStart(12, "0").substring(0, 12);
        uuid = "".concat(prefix.substring(0, 8), "-").concat(prefix.substring(8, 12));
      }
      for (var index = uuid.length; index < 36; index++) {
        switch (index) {
          case 8:
          case 13:
          case 18:
          case 23:
            uuid += "-";
            break;
          case 14:
            uuid += "4";
            break;
          default: {
            var random = Math.random() * 16 | 0;
            if (index === 19) {
              random = random & 3 | 8;
            }
            uuid += random.toString(16);
          }
        }
      }
      return uuid;
    }
    exports.uuid4 = uuid4;
  }
});

// node_modules/@croct/sdk/context.js
var require_context = __commonJS({
  "node_modules/@croct/sdk/context.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Context = void 0;
    var token_1 = require_token2();
    var tab_1 = require_tab();
    var uuid_1 = require_uuid();
    function tokenEquals(left, right) {
      return left === right || left !== null && right !== null && left.toString() === right.toString();
    }
    var Context = function() {
      function Context2(tab, tokenStore, eventDispatcher) {
        this.tab = tab;
        this.tokenStore = tokenStore;
        this.eventDispatcher = eventDispatcher;
        this.lastToken = tokenStore.getToken();
        this.syncToken = this.syncToken.bind(this);
      }
      Context2.load = function(_a) {
        var cache = _a.cache, tokenScope = _a.tokenScope, eventDispatcher = _a.eventDispatcher, urlSanitizer = _a.urlSanitizer;
        var tabId = cache.tabId.get();
        var newTab = false;
        if (tabId === null) {
          tabId = (0, uuid_1.uuid4)(true);
          newTab = true;
        }
        var tab = new tab_1.Tab(tabId, newTab, urlSanitizer);
        cache.tabId.clear();
        tab.addListener("unload", function() {
          return cache.tabId.put(tab.id);
        });
        switch (tokenScope) {
          case "isolated":
            return new Context2(tab, new token_1.InMemoryTokenStore(), eventDispatcher);
          case "global": {
            var context = new Context2(tab, new token_1.CachedTokenStore(cache.browserToken), eventDispatcher);
            cache.browserToken.addListener(context.syncToken);
            return context;
          }
          case "contextual": {
            var primaryStorage_1 = new token_1.CachedTokenStore(cache.tabToken);
            var secondaryStorage_1 = new token_1.CachedTokenStore(cache.browserToken);
            if (tab.isNew) {
              primaryStorage_1.setToken(secondaryStorage_1.getToken());
            }
            tab.addListener("visibilityChange", function(event) {
              if (event.detail.visible) {
                secondaryStorage_1.setToken(primaryStorage_1.getToken());
              }
            });
            return new Context2(tab, new token_1.ReplicatedTokenStore(primaryStorage_1, secondaryStorage_1), eventDispatcher);
          }
        }
      };
      Context2.prototype.getTab = function() {
        return this.tab;
      };
      Context2.prototype.isAnonymous = function() {
        var token = this.getToken();
        return token == null || token.isAnonymous();
      };
      Context2.prototype.getUser = function() {
        var token = this.getToken();
        return token == null ? null : token.getSubject();
      };
      Context2.prototype.getToken = function() {
        return this.tokenStore.getToken();
      };
      Context2.prototype.setToken = function(token) {
        var oldToken = this.lastToken;
        this.lastToken = token;
        this.tokenStore.setToken(token);
        if (!tokenEquals(oldToken, token)) {
          this.eventDispatcher.dispatch("tokenChanged", {
            oldToken,
            newToken: token
          });
        }
      };
      Context2.prototype.syncToken = function() {
        var newToken = this.tokenStore.getToken();
        var oldToken = this.lastToken;
        if (!tokenEquals(oldToken, newToken)) {
          this.lastToken = newToken;
          this.eventDispatcher.dispatch("tokenChanged", {
            oldToken,
            newToken
          });
        }
      };
      return Context2;
    }();
    exports.Context = Context;
  }
});

// node_modules/@croct/sdk/namespacedStorage.js
var require_namespacedStorage = __commonJS({
  "node_modules/@croct/sdk/namespacedStorage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NamespacedStorage = void 0;
    var tslib_1 = require_tslib();
    var NamespacedStorage = function() {
      function NamespacedStorage2(storage, namespace) {
        if (namespace === "") {
          throw new Error("The namespace cannot be empty.");
        }
        this.storage = storage;
        this.namespace = namespace;
      }
      Object.defineProperty(NamespacedStorage2.prototype, "length", {
        get: function() {
          return this.getKeys().length;
        },
        enumerable: false,
        configurable: true
      });
      NamespacedStorage2.prototype.clear = function() {
        var e_1, _a;
        try {
          for (var _b = tslib_1.__values(this.getKeys()), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            this.storage.removeItem(key);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      };
      NamespacedStorage2.prototype.getItem = function(key) {
        return this.storage.getItem(this.getPrefixedKey(key));
      };
      NamespacedStorage2.prototype.key = function(index) {
        var keys = this.getKeys();
        if (index >= keys.length) {
          return null;
        }
        return keys[index].substring(this.namespace.length + 1);
      };
      NamespacedStorage2.prototype.removeItem = function(key) {
        this.storage.removeItem(this.getPrefixedKey(key));
      };
      NamespacedStorage2.prototype.setItem = function(key, value) {
        this.storage.setItem(this.getPrefixedKey(key), value);
      };
      NamespacedStorage2.prototype.getKeys = function() {
        var keys = [];
        var prefix = this.getPrefix();
        for (var index = 0; index < this.storage.length; index++) {
          var key = this.storage.key(index);
          if (key !== null && key.indexOf(prefix) === 0) {
            keys.push(key);
          }
        }
        return keys;
      };
      NamespacedStorage2.prototype.getPrefixedKey = function(key) {
        return this.getPrefix() + key;
      };
      NamespacedStorage2.prototype.getPrefix = function() {
        return "".concat(this.namespace, ".");
      };
      return NamespacedStorage2;
    }();
    exports.NamespacedStorage = NamespacedStorage;
  }
});

// node_modules/@croct/sdk/retry/policy.js
var require_policy = __commonJS({
  "node_modules/@croct/sdk/retry/policy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@croct/sdk/retry/arbitraryPolicy.js
var require_arbitraryPolicy = __commonJS({
  "node_modules/@croct/sdk/retry/arbitraryPolicy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ArbitraryPolicy = void 0;
    var tslib_1 = require_tslib();
    var ArbitraryPolicy = function() {
      function ArbitraryPolicy2(delays) {
        if (delays.length < 1) {
          throw new Error("The list of delays cannot be empty.");
        }
        this.delays = tslib_1.__spreadArray([], tslib_1.__read(delays), false);
      }
      ArbitraryPolicy2.prototype.getDelay = function(attempt) {
        return this.delays[Math.min(attempt < 0 ? 0 : attempt, this.delays.length - 1)];
      };
      ArbitraryPolicy2.prototype.shouldRetry = function() {
        return true;
      };
      return ArbitraryPolicy2;
    }();
    exports.ArbitraryPolicy = ArbitraryPolicy;
  }
});

// node_modules/@croct/sdk/retry/backoffPolicy.js
var require_backoffPolicy = __commonJS({
  "node_modules/@croct/sdk/retry/backoffPolicy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BackoffPolicy = void 0;
    var BackoffPolicy = function() {
      function BackoffPolicy2(options) {
        if (options === void 0) {
          options = {};
        }
        this.minRetryDelay = 1e3;
        this.maxRetryDelay = 3e4;
        this.backoffFactor = 2;
        this.backoffJitter = 1;
        this.maxAttempts = Infinity;
        var _a = options.minRetryDelay, minRetryDelay = _a === void 0 ? this.minRetryDelay : _a, _b = options.maxRetryDelay, maxRetryDelay = _b === void 0 ? this.maxRetryDelay : _b, _c = options.backoffFactor, backoffFactor = _c === void 0 ? this.backoffFactor : _c, _d = options.backoffJitter, backoffJitter = _d === void 0 ? this.backoffJitter : _d, _e = options.maxAttempts, maxAttempts = _e === void 0 ? this.maxAttempts : _e;
        if (minRetryDelay < 0) {
          throw new Error("The minimum retry delay must be non-negative.");
        }
        if (maxRetryDelay < minRetryDelay) {
          throw new Error("The maximum retry delay must be greater than the minimum.");
        }
        if (backoffFactor < 1) {
          throw new Error("The backoff factor must be greater than zero.");
        }
        if (backoffJitter < 0) {
          throw new Error("The backoff jitter must be non-negative.");
        }
        if (maxAttempts < 0) {
          throw new Error("The maximum attempts must be non-negative.");
        }
        this.minRetryDelay = minRetryDelay;
        this.maxRetryDelay = maxRetryDelay;
        this.backoffFactor = backoffFactor;
        this.backoffJitter = backoffJitter;
        this.maxAttempts = maxAttempts;
      }
      BackoffPolicy2.prototype.getDelay = function(attempt) {
        var delay = Math.min(Math.max(Math.pow(this.backoffFactor, attempt), this.minRetryDelay), this.maxRetryDelay);
        if (this.backoffJitter > 0) {
          var min = Math.ceil(this.minRetryDelay);
          var max = Math.floor(delay);
          delay = Math.floor(Math.random() * (max - min + 1)) + min;
        }
        delay -= delay % 1;
        return delay;
      };
      BackoffPolicy2.prototype.shouldRetry = function(attempt) {
        return attempt < this.maxAttempts;
      };
      return BackoffPolicy2;
    }();
    exports.BackoffPolicy = BackoffPolicy;
  }
});

// node_modules/@croct/sdk/retry/maxAttemptsPolicy.js
var require_maxAttemptsPolicy = __commonJS({
  "node_modules/@croct/sdk/retry/maxAttemptsPolicy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MaxAttemptsPolicy = void 0;
    var MaxAttemptsPolicy = function() {
      function MaxAttemptsPolicy2(delay, maxAttempts) {
        if (delay < 0) {
          throw new Error("Delay must be non-negative.");
        }
        if (maxAttempts < 0) {
          throw new Error("Max attempts must be non-negative.");
        }
        this.maxAttempts = maxAttempts;
        this.delay = delay;
      }
      MaxAttemptsPolicy2.prototype.getDelay = function() {
        return this.delay;
      };
      MaxAttemptsPolicy2.prototype.shouldRetry = function(attempt) {
        return attempt < this.maxAttempts;
      };
      return MaxAttemptsPolicy2;
    }();
    exports.MaxAttemptsPolicy = MaxAttemptsPolicy;
  }
});

// node_modules/@croct/sdk/retry/neverPolicy.js
var require_neverPolicy = __commonJS({
  "node_modules/@croct/sdk/retry/neverPolicy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NeverPolicy = void 0;
    var NeverPolicy = function() {
      function NeverPolicy2() {
      }
      NeverPolicy2.prototype.getDelay = function() {
        return Infinity;
      };
      NeverPolicy2.prototype.shouldRetry = function() {
        return false;
      };
      return NeverPolicy2;
    }();
    exports.NeverPolicy = NeverPolicy;
  }
});

// node_modules/@croct/sdk/retry/index.js
var require_retry = __commonJS({
  "node_modules/@croct/sdk/retry/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NeverPolicy = exports.MaxAttemptsPolicy = exports.BackoffPolicy = exports.ArbitraryPolicy = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_policy(), exports);
    var arbitraryPolicy_1 = require_arbitraryPolicy();
    Object.defineProperty(exports, "ArbitraryPolicy", { enumerable: true, get: function() {
      return arbitraryPolicy_1.ArbitraryPolicy;
    } });
    var backoffPolicy_1 = require_backoffPolicy();
    Object.defineProperty(exports, "BackoffPolicy", { enumerable: true, get: function() {
      return backoffPolicy_1.BackoffPolicy;
    } });
    var maxAttemptsPolicy_1 = require_maxAttemptsPolicy();
    Object.defineProperty(exports, "MaxAttemptsPolicy", { enumerable: true, get: function() {
      return maxAttemptsPolicy_1.MaxAttemptsPolicy;
    } });
    var neverPolicy_1 = require_neverPolicy();
    Object.defineProperty(exports, "NeverPolicy", { enumerable: true, get: function() {
      return neverPolicy_1.NeverPolicy;
    } });
  }
});

// node_modules/@croct/sdk/queue/queue.js
var require_queue = __commonJS({
  "node_modules/@croct/sdk/queue/queue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@croct/sdk/queue/capacityRestrictedQueue.js
var require_capacityRestrictedQueue = __commonJS({
  "node_modules/@croct/sdk/queue/capacityRestrictedQueue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CapacityRestrictedQueue = void 0;
    var CapacityRestrictedQueue = function() {
      function CapacityRestrictedQueue2(queue, capacity) {
        this.queue = queue;
        this.capacity = capacity;
      }
      CapacityRestrictedQueue2.prototype.all = function() {
        return this.queue.all();
      };
      CapacityRestrictedQueue2.prototype.getCapacity = function() {
        return this.capacity;
      };
      CapacityRestrictedQueue2.prototype.isEmpty = function() {
        return this.queue.isEmpty();
      };
      CapacityRestrictedQueue2.prototype.length = function() {
        return Math.min(this.capacity, this.queue.length());
      };
      CapacityRestrictedQueue2.prototype.peek = function() {
        return this.queue.peek();
      };
      CapacityRestrictedQueue2.prototype.push = function(value) {
        if (this.queue.length() >= this.capacity) {
          throw new Error("Maximum queue capacity reached.");
        }
        this.queue.push(value);
      };
      CapacityRestrictedQueue2.prototype.shift = function() {
        return this.queue.shift();
      };
      return CapacityRestrictedQueue2;
    }();
    exports.CapacityRestrictedQueue = CapacityRestrictedQueue;
  }
});

// node_modules/@croct/sdk/queue/inMemoryQueue.js
var require_inMemoryQueue = __commonJS({
  "node_modules/@croct/sdk/queue/inMemoryQueue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InMemoryQueue = void 0;
    var tslib_1 = require_tslib();
    var InMemoryQueue = function() {
      function InMemoryQueue2() {
        var _a;
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          values[_i] = arguments[_i];
        }
        this.queue = [];
        (_a = this.queue).unshift.apply(_a, tslib_1.__spreadArray([], tslib_1.__read(values), false));
      }
      InMemoryQueue2.prototype.all = function() {
        return this.queue.slice();
      };
      InMemoryQueue2.prototype.getCapacity = function() {
        return Infinity;
      };
      InMemoryQueue2.prototype.isEmpty = function() {
        return this.queue.length === 0;
      };
      InMemoryQueue2.prototype.push = function(value) {
        this.queue.push(value);
      };
      InMemoryQueue2.prototype.peek = function() {
        return this.queue[0] || null;
      };
      InMemoryQueue2.prototype.shift = function() {
        var value = this.queue.shift();
        if (!value) {
          throw new Error("The queue is empty.");
        }
        return value;
      };
      InMemoryQueue2.prototype.length = function() {
        return this.queue.length;
      };
      return InMemoryQueue2;
    }();
    exports.InMemoryQueue = InMemoryQueue;
  }
});

// node_modules/@croct/sdk/queue/monitoredQueue.js
var require_monitoredQueue = __commonJS({
  "node_modules/@croct/sdk/queue/monitoredQueue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MonitoredQueue = void 0;
    var logging_1 = require_logging();
    var MonitoredQueue = function() {
      function MonitoredQueue2(queue, logger) {
        this.callbacks = {};
        this.queue = queue;
        this.logger = logger !== null && logger !== void 0 ? logger : new logging_1.NullLogger();
        this.updateStatus();
      }
      MonitoredQueue2.prototype.all = function() {
        return this.queue.all();
      };
      MonitoredQueue2.prototype.getCapacity = function() {
        return this.queue.getCapacity();
      };
      MonitoredQueue2.prototype.addCallback = function(status, callback) {
        var callbacks = this.callbacks[status] || [];
        if (!callbacks.includes(callback)) {
          callbacks.push(callback);
        }
        this.callbacks[status] = callbacks;
        switch (this.status) {
          case status:
            callback(this);
            break;
          case "empty":
          case "almostEmpty":
            if (status === "halfEmpty") {
              callback(this);
            }
            break;
          case "full":
          case "almostFull":
            if (status === "halfFull") {
              callback(this);
            }
            break;
        }
      };
      MonitoredQueue2.prototype.removeCallback = function(type, callback) {
        var callbacks = this.callbacks[type];
        if (!callbacks) {
          return;
        }
        var index = callbacks.indexOf(callback);
        if (index >= 0) {
          callbacks.splice(index, 1);
        }
      };
      MonitoredQueue2.prototype.setStatus = function(status) {
        if (this.status === status) {
          return;
        }
        this.logger.debug('Queue status changed to "'.concat(status, '"'));
        this.report(status);
        this.status = status;
      };
      MonitoredQueue2.prototype.report = function(status) {
        var _this = this;
        var callbacks = this.callbacks[status];
        if (callbacks !== void 0) {
          callbacks.forEach(function(callback) {
            return callback(_this);
          });
        }
        switch (status) {
          case "empty":
          case "almostEmpty":
            this.report("halfEmpty");
            break;
          case "full":
          case "almostFull":
            this.report("halfFull");
            break;
          default:
            break;
        }
      };
      MonitoredQueue2.prototype.isEmpty = function() {
        return this.queue.isEmpty();
      };
      MonitoredQueue2.prototype.length = function() {
        return this.queue.length();
      };
      MonitoredQueue2.prototype.peek = function() {
        return this.queue.peek();
      };
      MonitoredQueue2.prototype.push = function(value) {
        this.queue.push(value);
        this.updateStatus();
      };
      MonitoredQueue2.prototype.shift = function() {
        var value = this.queue.shift();
        this.updateStatus();
        return value;
      };
      MonitoredQueue2.prototype.updateStatus = function() {
        var length = this.queue.length();
        var capacity = this.getCapacity();
        if (length <= capacity * 0.5) {
          if (length === 0) {
            this.setStatus("empty");
          } else if (length <= capacity * 0.25) {
            this.setStatus("almostEmpty");
          } else {
            this.setStatus("halfEmpty");
          }
          return;
        }
        if (length >= capacity) {
          this.setStatus("full");
        } else if (length >= capacity * 0.75) {
          this.setStatus("almostFull");
        } else {
          this.setStatus("halfFull");
        }
      };
      return MonitoredQueue2;
    }();
    exports.MonitoredQueue = MonitoredQueue;
  }
});

// node_modules/@croct/sdk/queue/persistentQueue.js
var require_persistentQueue = __commonJS({
  "node_modules/@croct/sdk/queue/persistentQueue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PersistentQueue = void 0;
    var PersistentQueue = function() {
      function PersistentQueue2(storage, key) {
        if (key === void 0) {
          key = "queue";
        }
        this.storage = storage;
        this.key = key;
      }
      PersistentQueue2.prototype.all = function() {
        return this.queue.slice();
      };
      PersistentQueue2.prototype.getCapacity = function() {
        return Infinity;
      };
      PersistentQueue2.prototype.isEmpty = function() {
        return this.length() === 0;
      };
      PersistentQueue2.prototype.length = function() {
        return this.queue.length;
      };
      PersistentQueue2.prototype.push = function(value) {
        this.queue.push(value);
        this.flush();
      };
      PersistentQueue2.prototype.peek = function() {
        var item = this.queue[0];
        if (item === void 0) {
          return null;
        }
        return item;
      };
      PersistentQueue2.prototype.shift = function() {
        var value = this.queue.shift();
        if (!value) {
          throw new Error("The queue is empty.");
        }
        this.flush();
        return value;
      };
      Object.defineProperty(PersistentQueue2.prototype, "queue", {
        get: function() {
          if (!this.cache) {
            this.cache = this.load();
          }
          return this.cache;
        },
        enumerable: false,
        configurable: true
      });
      PersistentQueue2.prototype.flush = function() {
        this.storage.setItem(this.key, JSON.stringify(this.cache || []));
      };
      PersistentQueue2.prototype.load = function() {
        var data = this.storage.getItem(this.key);
        if (data === null) {
          return [];
        }
        try {
          return JSON.parse(data);
        } catch (error) {
          return [];
        }
      };
      return PersistentQueue2;
    }();
    exports.PersistentQueue = PersistentQueue;
  }
});

// node_modules/@croct/sdk/queue/index.js
var require_queue2 = __commonJS({
  "node_modules/@croct/sdk/queue/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PersistentQueue = exports.MonitoredQueue = exports.InMemoryQueue = exports.CapacityRestrictedQueue = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_queue(), exports);
    var capacityRestrictedQueue_1 = require_capacityRestrictedQueue();
    Object.defineProperty(exports, "CapacityRestrictedQueue", { enumerable: true, get: function() {
      return capacityRestrictedQueue_1.CapacityRestrictedQueue;
    } });
    var inMemoryQueue_1 = require_inMemoryQueue();
    Object.defineProperty(exports, "InMemoryQueue", { enumerable: true, get: function() {
      return inMemoryQueue_1.InMemoryQueue;
    } });
    var monitoredQueue_1 = require_monitoredQueue();
    Object.defineProperty(exports, "MonitoredQueue", { enumerable: true, get: function() {
      return monitoredQueue_1.MonitoredQueue;
    } });
    var persistentQueue_1 = require_persistentQueue();
    Object.defineProperty(exports, "PersistentQueue", { enumerable: true, get: function() {
      return persistentQueue_1.PersistentQueue;
    } });
  }
});

// node_modules/@croct/sdk/trackingEvents.js
var require_trackingEvents = __commonJS({
  "node_modules/@croct/sdk/trackingEvents.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isCartPartialEvent = exports.isIdentifiedUserEvent = exports.eventTypes = exports.miscEventTypes = exports.userEventTypes = exports.identifiedUserEventTypes = exports.ecommerceEventTypes = exports.cartEventTypes = exports.tabEventTypes = exports.pageEventTypes = void 0;
    var tslib_1 = require_tslib();
    exports.pageEventTypes = [
      "pageLoaded",
      "pageOpened"
    ];
    exports.tabEventTypes = [
      "tabOpened",
      "tabUrlChanged",
      "tabVisibilityChanged"
    ];
    exports.cartEventTypes = [
      "cartModified",
      "cartViewed",
      "checkoutStarted"
    ];
    exports.ecommerceEventTypes = tslib_1.__spreadArray(tslib_1.__spreadArray([], tslib_1.__read(exports.cartEventTypes), false), [
      "orderPlaced",
      "productViewed"
    ], false);
    exports.identifiedUserEventTypes = [
      "userSignedIn",
      "userSignedOut",
      "userSignedUp"
    ];
    exports.userEventTypes = tslib_1.__spreadArray(tslib_1.__spreadArray([], tslib_1.__read(exports.identifiedUserEventTypes), false), [
      "userProfileChanged"
    ], false);
    exports.miscEventTypes = [
      "nothingChanged",
      "sessionAttributesChanged",
      "goalCompleted",
      "interestShown",
      "postViewed",
      "eventOccurred",
      "linkOpened"
    ];
    exports.eventTypes = tslib_1.__spreadArray(tslib_1.__spreadArray(tslib_1.__spreadArray(tslib_1.__spreadArray([], tslib_1.__read(exports.pageEventTypes), false), tslib_1.__read(exports.ecommerceEventTypes), false), tslib_1.__read(exports.userEventTypes), false), tslib_1.__read(exports.miscEventTypes), false);
    function isIdentifiedUserEvent(event) {
      return exports.identifiedUserEventTypes.includes(event.type);
    }
    exports.isIdentifiedUserEvent = isIdentifiedUserEvent;
    function isCartPartialEvent(event) {
      return exports.cartEventTypes.includes(event.type);
    }
    exports.isCartPartialEvent = isCartPartialEvent;
  }
});

// node_modules/@croct/sdk/tracker.js
var require_tracker = __commonJS({
  "node_modules/@croct/sdk/tracker.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Tracker = void 0;
    var tslib_1 = require_tslib();
    var logging_1 = require_logging();
    var error_1 = require_error();
    var trackingEvents_1 = require_trackingEvents();
    var trackedEvents = {};
    var Tracker = function() {
      function Tracker2(_a) {
        var _b;
        var tab = _a.tab, tokenProvider = _a.tokenProvider, channel = _a.channel, logger = _a.logger, inactivityRetryPolicy = _a.inactivityRetryPolicy, options = tslib_1.__rest(_a, ["tab", "tokenProvider", "channel", "logger", "inactivityRetryPolicy"]);
        this.listeners = [];
        this.pending = [];
        this.state = {
          enabled: false,
          initialized: false,
          suspended: false
        };
        this.inactivityTimer = {
          since: 0
        };
        this.tab = tab;
        this.tokenProvider = tokenProvider;
        this.inactivityRetryPolicy = inactivityRetryPolicy;
        this.channel = channel;
        this.logger = logger !== null && logger !== void 0 ? logger : new logging_1.NullLogger();
        this.options = tslib_1.__assign(tslib_1.__assign({}, options), { eventMetadata: (_b = options.eventMetadata) !== null && _b !== void 0 ? _b : {} });
        this.enable = this.enable.bind(this);
        this.disable = this.disable.bind(this);
        this.suspend = this.suspend.bind(this);
        this.unsuspend = this.unsuspend.bind(this);
        this.trackPageLoad = this.trackPageLoad.bind(this);
        this.trackTabVisibilityChange = this.trackTabVisibilityChange.bind(this);
        this.trackTabUrlChange = this.trackTabUrlChange.bind(this);
        this.trackInactivity = this.trackInactivity.bind(this);
      }
      Tracker2.prototype.addListener = function(listener) {
        this.listeners.push(listener);
      };
      Tracker2.prototype.removeListener = function(listener) {
        var index = this.listeners.indexOf(listener);
        while (index >= 0) {
          this.listeners.splice(index, 1);
          index = this.listeners.indexOf(listener);
        }
      };
      Object.defineProperty(Tracker2.prototype, "flushed", {
        get: function() {
          var suppress = function() {
          };
          return Promise.all(this.pending).then(suppress, suppress);
        },
        enumerable: false,
        configurable: true
      });
      Tracker2.prototype.isEnabled = function() {
        return this.state.enabled;
      };
      Tracker2.prototype.isSuspended = function() {
        return this.state.suspended;
      };
      Tracker2.prototype.enable = function() {
        if (this.state.enabled) {
          return;
        }
        this.logger.info("Tracker enabled");
        this.state.enabled = true;
        if (this.state.suspended) {
          return;
        }
        this.startInactivityTimer();
        if (!this.state.initialized) {
          this.state.initialized = true;
          this.initialize();
        }
        this.tab.addListener("load", this.trackPageLoad);
        this.tab.addListener("urlChange", this.trackTabUrlChange);
        this.tab.addListener("visibilityChange", this.trackTabVisibilityChange);
      };
      Tracker2.prototype.disable = function() {
        if (!this.state.enabled) {
          return;
        }
        this.logger.info("Tracker disabled");
        this.state.enabled = false;
        if (this.state.suspended) {
          return;
        }
        this.tab.removeListener("load", this.trackPageLoad);
        this.tab.removeListener("urlChange", this.trackTabUrlChange);
        this.tab.removeListener("visibilityChange", this.trackTabVisibilityChange);
        this.stopInactivityTimer();
      };
      Tracker2.prototype.suspend = function() {
        if (this.state.suspended) {
          return;
        }
        this.logger.info("Tracker suspended");
        if (this.state.enabled) {
          this.disable();
          this.state.enabled = true;
        }
        this.state.suspended = true;
      };
      Tracker2.prototype.unsuspend = function() {
        if (!this.state.suspended) {
          return;
        }
        this.logger.info("Tracker unsuspended");
        this.state.suspended = false;
        if (this.state.enabled) {
          this.state.enabled = false;
          this.enable();
        }
      };
      Tracker2.prototype.initialize = function() {
        if (trackedEvents[this.tab.id] === void 0) {
          trackedEvents[this.tab.id] = {};
        }
        var initEvents = trackedEvents[this.tab.id];
        if (this.tab.isNew && !initEvents.tabOpened) {
          initEvents.tabOpened = true;
          this.trackTabOpen({ tabId: this.tab.id });
        }
        if (!initEvents.pageOpened) {
          initEvents.pageOpened = true;
          this.trackPageOpen({
            url: this.tab.url,
            referrer: this.tab.referrer
          });
        }
      };
      Tracker2.prototype.stopInactivityTimer = function() {
        if (this.inactivityTimer.id !== void 0) {
          window.clearTimeout(this.inactivityTimer.id);
          delete this.inactivityTimer.id;
        }
      };
      Tracker2.prototype.startInactivityTimer = function() {
        var _this = this;
        this.stopInactivityTimer();
        this.inactivityTimer.since = Date.now();
        var iteration = -1;
        var startTimer = function() {
          if (!_this.inactivityRetryPolicy.shouldRetry(iteration + 1, _this.inactivityTimer.since)) {
            window.clearTimeout(_this.inactivityTimer.id);
            return;
          }
          iteration += 1;
          _this.inactivityTimer.id = window.setTimeout(function() {
            _this.trackInactivity();
            startTimer();
          }, _this.inactivityRetryPolicy.getDelay(iteration));
        };
        startTimer();
      };
      Tracker2.prototype.track = function(event, timestamp) {
        if (timestamp === void 0) {
          timestamp = Date.now();
        }
        return this.publish(this.enrichEvent(event, timestamp), timestamp).then(function() {
          return event;
        });
      };
      Tracker2.prototype.trackPageOpen = function(_a) {
        var referrer = _a.referrer, payload = tslib_1.__rest(_a, ["referrer"]);
        this.enqueue(tslib_1.__assign(tslib_1.__assign({ type: "pageOpened" }, payload), referrer.length > 0 ? { referrer } : {}));
      };
      Tracker2.prototype.trackPageLoad = function(_a) {
        var tab = _a.detail.tab;
        this.enqueue({
          type: "pageLoaded",
          url: tab.url,
          title: tab.title,
          lastModifiedTime: Date.parse(tab.document.lastModified)
        });
      };
      Tracker2.prototype.trackTabOpen = function(payload) {
        this.enqueue(tslib_1.__assign({ type: "tabOpened" }, payload));
      };
      Tracker2.prototype.trackTabUrlChange = function(_a) {
        var detail = _a.detail;
        this.enqueue({
          type: "tabUrlChanged",
          tabId: detail.tab.id,
          url: detail.url
        });
      };
      Tracker2.prototype.trackTabVisibilityChange = function(_a) {
        var detail = _a.detail;
        this.enqueue({
          type: "tabVisibilityChanged",
          tabId: detail.tab.id,
          visibility: detail.visible ? "visible" : "hidden"
        });
      };
      Tracker2.prototype.trackInactivity = function() {
        this.enqueue({
          type: "nothingChanged",
          sinceTime: this.inactivityTimer.since
        });
      };
      Tracker2.prototype.enqueue = function(event, timestamp) {
        if (timestamp === void 0) {
          timestamp = Date.now();
        }
        this.publish(event, timestamp).catch(function() {
        });
      };
      Tracker2.prototype.notifyEvent = function(event) {
        this.listeners.map(function(listener) {
          return listener(event);
        });
      };
      Tracker2.prototype.publish = function(event, timestamp) {
        var _this = this;
        if (event.type !== "nothingChanged") {
          this.stopInactivityTimer();
        }
        var metadata = this.options.eventMetadata;
        var context = tslib_1.__assign({ tabId: this.tab.id, url: this.tab.url }, Object.keys(metadata).length > 0 ? { metadata } : {});
        var eventInfo = {
          event,
          context,
          timestamp,
          status: "pending"
        };
        if (this.state.suspended) {
          this.logger.warn('Tracker is suspended, ignoring event "'.concat(event.type, '"'));
          this.notifyEvent(tslib_1.__assign(tslib_1.__assign({}, eventInfo), { status: "ignored" }));
          return Promise.reject(new Error("The tracker is suspended."));
        }
        this.logger.info('Tracked event "'.concat(event.type, '"'));
        this.notifyEvent(eventInfo);
        return new Promise(function(resolve, reject) {
          var promise = _this.channel.publish(_this.createBeacon(event, timestamp, context)).then(function() {
            _this.logger.debug('Successfully published event "'.concat(event.type, '"'));
            _this.notifyEvent(tslib_1.__assign(tslib_1.__assign({}, eventInfo), { status: "confirmed" }));
            resolve(event);
          }, function(cause) {
            _this.logger.error('Failed to publish event "'.concat(event.type, '", reason: ').concat((0, error_1.formatCause)(cause)));
            _this.notifyEvent(tslib_1.__assign(tslib_1.__assign({}, eventInfo), { status: "failed" }));
            reject(cause);
          });
          _this.pending.push(promise);
          promise.finally(function() {
            _this.pending.splice(_this.pending.indexOf(promise), 1);
          });
          if (_this.state.enabled && event.type !== "nothingChanged") {
            _this.startInactivityTimer();
          }
        });
      };
      Tracker2.prototype.enrichEvent = function(event, timestamp) {
        if ((0, trackingEvents_1.isCartPartialEvent)(event)) {
          var _a = event.cart, _b = _a.lastUpdateTime, lastUpdateTime = _b === void 0 ? timestamp : _b, cart = tslib_1.__rest(_a, ["lastUpdateTime"]), payload = tslib_1.__rest(event, ["cart"]);
          return tslib_1.__assign(tslib_1.__assign({}, payload), { cart: tslib_1.__assign(tslib_1.__assign({}, cart), { lastUpdateTime }) });
        }
        return event;
      };
      Tracker2.prototype.createBeacon = function(event, timestamp, context) {
        var token = this.tokenProvider.getToken();
        return tslib_1.__assign(tslib_1.__assign({ timestamp }, token !== null ? { token: token.toString() } : {}), { context, payload: this.enrichBeaconPayload(this.createBeaconPayload(event)) });
      };
      Tracker2.prototype.createBeaconPayload = function(event) {
        if (!(0, trackingEvents_1.isIdentifiedUserEvent)(event)) {
          return event;
        }
        if (event.type === "userSignedUp" && event.profile !== void 0) {
          var userId_1 = event.userId, profile = event.profile, payload_1 = tslib_1.__rest(event, ["userId", "profile"]);
          return tslib_1.__assign(tslib_1.__assign({}, payload_1), { externalUserId: userId_1, patch: {
            operations: [
              {
                type: "set",
                path: ".",
                value: profile
              }
            ]
          } });
        }
        var userId = event.userId, payload = tslib_1.__rest(event, ["userId"]);
        return tslib_1.__assign(tslib_1.__assign({}, payload), { externalUserId: userId });
      };
      Tracker2.prototype.enrichBeaconPayload = function(event) {
        switch (event.type) {
          case "linkOpened":
            return tslib_1.__assign(tslib_1.__assign({}, event), { link: new URL(event.link, this.tab.url).toString() });
          default:
            return event;
        }
      };
      return Tracker2;
    }();
    exports.Tracker = Tracker;
  }
});

// node_modules/@croct/sdk/constants.js
var require_constants = __commonJS({
  "node_modules/@croct/sdk/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VERSION = exports.MAX_EXPRESSION_LENGTH = exports.BOOTSTRAP_ENDPOINT_URL = exports.EVALUATION_ENDPOINT_URL = exports.TRACKER_ENDPOINT_URL = void 0;
    exports.TRACKER_ENDPOINT_URL = "wss://api.croct.io/client/web/connect";
    exports.EVALUATION_ENDPOINT_URL = "https://api.croct.io/client/web/evaluate";
    exports.BOOTSTRAP_ENDPOINT_URL = "https://api.croct.io/client/web/bootstrap";
    exports.MAX_EXPRESSION_LENGTH = 300;
    exports.VERSION = "0.9.1";
  }
});

// node_modules/@croct/sdk/sourceLocation.js
var require_sourceLocation = __commonJS({
  "node_modules/@croct/sdk/sourceLocation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLocation = exports.getPosition = exports.getLength = void 0;
    var tslib_1 = require_tslib();
    function getLength(input) {
      return tslib_1.__spreadArray([], tslib_1.__read(input), false).length;
    }
    exports.getLength = getLength;
    function getPosition(input, index) {
      return getLocation(input, index, index).start;
    }
    exports.getPosition = getPosition;
    function getLocation(input, startIndex, endIndex) {
      if (startIndex < 0) {
        throw Error("The start index cannot be negative.");
      }
      if (endIndex < startIndex) {
        throw new Error("The end index must greater than or equal to the start index.");
      }
      var start;
      var end;
      var chars = tslib_1.__spreadArray([], tslib_1.__read(input), false);
      var line = 1;
      var column = 0;
      for (var offset = 0; offset < chars.length; offset++) {
        var char = chars[offset];
        if (offset === startIndex) {
          start = {
            index: offset,
            line,
            column
          };
        }
        if (offset === endIndex) {
          end = {
            index: offset,
            line,
            column
          };
          break;
        }
        if (char === "\n") {
          line += 1;
          column = 0;
        } else {
          column += 1;
        }
      }
      if (start === void 0) {
        start = {
          index: chars.length,
          line,
          column
        };
      }
      if (end === void 0) {
        end = {
          index: chars.length,
          line,
          column
        };
      }
      return {
        start,
        end
      };
    }
    exports.getLocation = getLocation;
  }
});

// node_modules/@croct/sdk/evaluator.js
var require_evaluator = __commonJS({
  "node_modules/@croct/sdk/evaluator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Evaluator = exports.ExpressionError = exports.EvaluationError = exports.EvaluationErrorType = void 0;
    var tslib_1 = require_tslib();
    var constants_1 = require_constants();
    var error_1 = require_error();
    var sourceLocation_1 = require_sourceLocation();
    var EvaluationErrorType;
    (function(EvaluationErrorType2) {
      EvaluationErrorType2["TIMEOUT"] = "https://croct.help/api/evaluation#timeout";
      EvaluationErrorType2["UNEXPECTED_ERROR"] = "https://croct.help/api/evaluation#unexpected-error";
      EvaluationErrorType2["INVALID_EXPRESSION"] = "https://croct.help/api/evaluation#invalid-expression";
      EvaluationErrorType2["TOO_COMPLEX_EXPRESSION"] = "https://croct.help/api/evaluation#too-complex-expression";
      EvaluationErrorType2["EVALUATION_FAILED"] = "https://croct.help/api/evaluation#evaluation-failed";
      EvaluationErrorType2["UNALLOWED_RESULT"] = "https://croct.help/api/evaluation#unallowed-result";
      EvaluationErrorType2["UNSERIALIZABLE_RESULT"] = "https://croct.help/api/evaluation#unserializable-result";
    })(EvaluationErrorType = exports.EvaluationErrorType || (exports.EvaluationErrorType = {}));
    var EvaluationError = function(_super) {
      tslib_1.__extends(EvaluationError2, _super);
      function EvaluationError2(response) {
        var _this = _super.call(this, response.title) || this;
        _this.response = response;
        Object.setPrototypeOf(_this, EvaluationError2.prototype);
        return _this;
      }
      return EvaluationError2;
    }(Error);
    exports.EvaluationError = EvaluationError;
    var ExpressionError = function(_super) {
      tslib_1.__extends(ExpressionError2, _super);
      function ExpressionError2(response) {
        var _this = _super.call(this, response) || this;
        Object.setPrototypeOf(_this, ExpressionError2.prototype);
        return _this;
      }
      return ExpressionError2;
    }(EvaluationError);
    exports.ExpressionError = ExpressionError;
    var Evaluator = function() {
      function Evaluator2(configuration) {
        var _a;
        this.configuration = tslib_1.__assign(tslib_1.__assign({}, configuration), { endpointUrl: (_a = configuration.endpointUrl) !== null && _a !== void 0 ? _a : constants_1.EVALUATION_ENDPOINT_URL });
      }
      Evaluator2.prototype.evaluate = function(expression, options) {
        if (options === void 0) {
          options = {};
        }
        return tslib_1.__awaiter(this, void 0, void 0, function() {
          var length, response, endpoint;
          var _this = this;
          return tslib_1.__generator(this, function(_a) {
            length = (0, sourceLocation_1.getLength)(expression);
            if (length > Evaluator2.MAX_EXPRESSION_LENGTH) {
              response = {
                title: "The expression is too complex.",
                status: 422,
                type: EvaluationErrorType.TOO_COMPLEX_EXPRESSION,
                detail: "The expression must be at most ".concat(Evaluator2.MAX_EXPRESSION_LENGTH, " characters long, ") + "but it is ".concat(length, " characters long."),
                errors: [{
                  cause: "The expression is longer than expected.",
                  location: (0, sourceLocation_1.getLocation)(expression, 0, Math.max(length - 1, 0))
                }]
              };
              return [2, Promise.reject(new ExpressionError(response))];
            }
            endpoint = new URL(this.configuration.endpointUrl);
            endpoint.searchParams.append("expression", expression);
            if (options.context !== void 0) {
              endpoint.searchParams.append("context", JSON.stringify(options.context));
            }
            return [2, new Promise(function(resolve, reject) {
              if (options.timeout !== void 0) {
                window.setTimeout(function() {
                  var response2 = {
                    title: "Maximum evaluation timeout reached before evaluation could complete.",
                    type: EvaluationErrorType.TIMEOUT,
                    detail: "The evaluation took more than ".concat(options.timeout, "ms to complete."),
                    status: 408
                  };
                  reject(new EvaluationError(response2));
                }, options.timeout);
              }
              var promise = _this.fetch(endpoint.toString());
              promise.then(function(response2) {
                if (response2.ok) {
                  response2.json().then(resolve);
                  return;
                }
                response2.json().then(function(result) {
                  var errorResponse = result;
                  switch (errorResponse.type) {
                    case EvaluationErrorType.INVALID_EXPRESSION:
                    case EvaluationErrorType.EVALUATION_FAILED:
                    case EvaluationErrorType.TOO_COMPLEX_EXPRESSION:
                      reject(new ExpressionError(errorResponse));
                      break;
                    default:
                      reject(new EvaluationError(errorResponse));
                      break;
                  }
                });
              }, function(error) {
                var errorResponse = {
                  title: (0, error_1.formatMessage)(error),
                  type: EvaluationErrorType.UNEXPECTED_ERROR,
                  detail: "Please try again or contact Croct support if the error persists.",
                  status: 500
                };
                reject(new EvaluationError(errorResponse));
              });
            })];
          });
        });
      };
      Evaluator2.prototype.fetch = function(endpoint) {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
          var _a, tokenProvider, cidAssigner, appId, token, cid, headers;
          return tslib_1.__generator(this, function(_b) {
            switch (_b.label) {
              case 0:
                _a = this.configuration, tokenProvider = _a.tokenProvider, cidAssigner = _a.cidAssigner, appId = _a.appId;
                token = tokenProvider.getToken();
                return [4, cidAssigner.assignCid()];
              case 1:
                cid = _b.sent();
                headers = tslib_1.__assign({ "X-App-Id": appId, "X-Client-Id": cid }, token !== null && { "X-Token": token.toString() });
                return [2, window.fetch(endpoint.toString(), {
                  method: "GET",
                  headers,
                  credentials: "include"
                })];
            }
          });
        });
      };
      Evaluator2.MAX_EXPRESSION_LENGTH = constants_1.MAX_EXPRESSION_LENGTH;
      return Evaluator2;
    }();
    exports.Evaluator = Evaluator;
  }
});

// node_modules/@croct/sdk/transformer.js
var require_transformer = __commonJS({
  "node_modules/@croct/sdk/transformer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodeJson = void 0;
    var encodeJson = function encodeJson2(input) {
      return Promise.resolve(JSON.stringify(input));
    };
    exports.encodeJson = encodeJson;
  }
});

// node_modules/@croct/sdk/cid/assigner.js
var require_assigner = __commonJS({
  "node_modules/@croct/sdk/cid/assigner.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@croct/sdk/cid/cachedAssigner.js
var require_cachedAssigner = __commonJS({
  "node_modules/@croct/sdk/cid/cachedAssigner.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CachedAssigner = void 0;
    var tslib_1 = require_tslib();
    var logging_1 = require_logging();
    var CachedAssigner = function() {
      function CachedAssigner2(assigner, cache, logger) {
        this.assigner = assigner;
        this.cache = cache;
        this.logger = logger !== null && logger !== void 0 ? logger : new logging_1.NullLogger();
      }
      CachedAssigner2.prototype.assignCid = function() {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
          var cid, newCid;
          return tslib_1.__generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                cid = this.cache.get();
                if (cid !== null) {
                  this.logger.debug("Previous CID loaded from cache");
                  return [2, cid];
                }
                return [4, this.assigner.assignCid()];
              case 1:
                newCid = _a.sent();
                this.cache.put(newCid);
                this.logger.debug("New CID stored into cache");
                return [2, newCid];
            }
          });
        });
      };
      return CachedAssigner2;
    }();
    exports.CachedAssigner = CachedAssigner;
  }
});

// node_modules/@croct/sdk/cid/fixedAssigner.js
var require_fixedAssigner = __commonJS({
  "node_modules/@croct/sdk/cid/fixedAssigner.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FixedAssigner = void 0;
    var FixedAssigner = function() {
      function FixedAssigner2(cid) {
        this.cid = cid;
      }
      FixedAssigner2.prototype.assignCid = function() {
        return Promise.resolve(this.cid);
      };
      return FixedAssigner2;
    }();
    exports.FixedAssigner = FixedAssigner;
  }
});

// node_modules/@croct/sdk/cid/remoteAssigner.js
var require_remoteAssigner = __commonJS({
  "node_modules/@croct/sdk/cid/remoteAssigner.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoteAssigner = void 0;
    var tslib_1 = require_tslib();
    var logging_1 = require_logging();
    var error_1 = require_error();
    var RemoteAssigner = function() {
      function RemoteAssigner2(endpoint, logger) {
        this.endpoint = endpoint;
        this.logger = logger !== null && logger !== void 0 ? logger : new logging_1.NullLogger();
      }
      RemoteAssigner2.prototype.assignCid = function() {
        var _this = this;
        if (this.pending === void 0) {
          this.pending = this.fetchCid().finally(function() {
            _this.pending = void 0;
          });
        }
        return this.pending;
      };
      RemoteAssigner2.prototype.fetchCid = function() {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
          var options, response, error;
          return tslib_1.__generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                options = {
                  method: "GET",
                  credentials: "include"
                };
                return [4, window.fetch(this.endpoint, options)];
              case 1:
                response = _a.sent();
                if (!response.ok) {
                  error = new Error("Failed to assign CID: ".concat((0, error_1.formatCause)(response.statusText)));
                  this.logger.error(error.message);
                  throw error;
                }
                this.logger.debug("New CID successfully assigned");
                return [2, response.text()];
            }
          });
        });
      };
      return RemoteAssigner2;
    }();
    exports.RemoteAssigner = RemoteAssigner;
  }
});

// node_modules/@croct/sdk/cid/index.js
var require_cid = __commonJS({
  "node_modules/@croct/sdk/cid/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoteAssigner = exports.FixedAssigner = exports.CachedAssigner = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_assigner(), exports);
    var cachedAssigner_1 = require_cachedAssigner();
    Object.defineProperty(exports, "CachedAssigner", { enumerable: true, get: function() {
      return cachedAssigner_1.CachedAssigner;
    } });
    var fixedAssigner_1 = require_fixedAssigner();
    Object.defineProperty(exports, "FixedAssigner", { enumerable: true, get: function() {
      return fixedAssigner_1.FixedAssigner;
    } });
    var remoteAssigner_1 = require_remoteAssigner();
    Object.defineProperty(exports, "RemoteAssigner", { enumerable: true, get: function() {
      return remoteAssigner_1.RemoteAssigner;
    } });
  }
});

// node_modules/@croct/sdk/cache/cache.js
var require_cache = __commonJS({
  "node_modules/@croct/sdk/cache/cache.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@croct/sdk/cache/fallbackCache.js
var require_fallbackCache = __commonJS({
  "node_modules/@croct/sdk/cache/fallbackCache.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FallbackCache = void 0;
    var tslib_1 = require_tslib();
    var FallbackCache = function() {
      function FallbackCache2() {
        var caches = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          caches[_i] = arguments[_i];
        }
        this.caches = caches;
      }
      FallbackCache2.prototype.get = function() {
        var e_1, _a;
        try {
          for (var _b = tslib_1.__values(this.caches), _c = _b.next(); !_c.done; _c = _b.next()) {
            var cache = _c.value;
            var value = cache.get();
            if (value !== null) {
              return value;
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        return null;
      };
      FallbackCache2.prototype.put = function(value) {
        this.caches.forEach(function(cache) {
          return cache.put(value);
        });
      };
      FallbackCache2.prototype.clear = function() {
        this.caches.forEach(function(cache) {
          return cache.clear();
        });
      };
      return FallbackCache2;
    }();
    exports.FallbackCache = FallbackCache;
  }
});

// node_modules/@croct/sdk/cache/inMemoryCache.js
var require_inMemoryCache = __commonJS({
  "node_modules/@croct/sdk/cache/inMemoryCache.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InMemoryCache = void 0;
    var InMemoryCache = function() {
      function InMemoryCache2(cache) {
        this.cache = cache;
      }
      InMemoryCache2.prototype.get = function() {
        var _a;
        return (_a = this.cache) !== null && _a !== void 0 ? _a : null;
      };
      InMemoryCache2.prototype.put = function(value) {
        this.cache = value;
      };
      InMemoryCache2.prototype.clear = function() {
        delete this.cache;
      };
      return InMemoryCache2;
    }();
    exports.InMemoryCache = InMemoryCache;
  }
});

// node_modules/@croct/sdk/cache/localStorageCache.js
var require_localStorageCache = __commonJS({
  "node_modules/@croct/sdk/cache/localStorageCache.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LocalStorageCache = void 0;
    var LocalStorageCache = function() {
      function LocalStorageCache2(storage, key) {
        this.listeners = [];
        this.storage = storage;
        this.key = key;
        this.value = storage.getItem(key);
      }
      LocalStorageCache2.autoSync = function(cache) {
        var listener = cache.sync.bind(cache);
        window.addEventListener("storage", listener);
        return function() {
          return window.removeEventListener("storage", listener);
        };
      };
      LocalStorageCache2.prototype.get = function() {
        return this.value;
      };
      LocalStorageCache2.prototype.put = function(value) {
        this.storage.setItem(this.key, value);
        if (this.value !== value) {
          this.value = value;
          this.notifyChange(value);
        }
      };
      LocalStorageCache2.prototype.clear = function() {
        this.storage.removeItem(this.key);
        if (this.value !== null) {
          this.value = null;
          this.notifyChange(null);
        }
      };
      LocalStorageCache2.prototype.addListener = function(listener) {
        if (!this.listeners.includes(listener)) {
          this.listeners.push(listener);
        }
      };
      LocalStorageCache2.prototype.removeListener = function(listener) {
        var index = this.listeners.indexOf(listener);
        if (index > -1) {
          this.listeners.splice(index, 1);
        }
      };
      LocalStorageCache2.prototype.notifyChange = function(value) {
        this.listeners.forEach(function(listener) {
          return listener(value);
        });
      };
      LocalStorageCache2.prototype.sync = function(event) {
        if (event.storageArea !== this.storage || event.key !== null && event.key !== this.key) {
          return;
        }
        var value = this.storage.getItem(this.key);
        if (this.value !== value) {
          this.value = value;
          this.notifyChange(value);
        }
      };
      return LocalStorageCache2;
    }();
    exports.LocalStorageCache = LocalStorageCache;
  }
});

// node_modules/@croct/sdk/cache/index.js
var require_cache2 = __commonJS({
  "node_modules/@croct/sdk/cache/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LocalStorageCache = exports.InMemoryCache = exports.FallbackCache = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_cache(), exports);
    var fallbackCache_1 = require_fallbackCache();
    Object.defineProperty(exports, "FallbackCache", { enumerable: true, get: function() {
      return fallbackCache_1.FallbackCache;
    } });
    var inMemoryCache_1 = require_inMemoryCache();
    Object.defineProperty(exports, "InMemoryCache", { enumerable: true, get: function() {
      return inMemoryCache_1.InMemoryCache;
    } });
    var localStorageCache_1 = require_localStorageCache();
    Object.defineProperty(exports, "LocalStorageCache", { enumerable: true, get: function() {
      return localStorageCache_1.LocalStorageCache;
    } });
  }
});

// node_modules/@croct/sdk/channel/guaranteedChannel.js
var require_guaranteedChannel = __commonJS({
  "node_modules/@croct/sdk/channel/guaranteedChannel.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GuaranteedChannel = exports.TimeStamper = void 0;
    var tslib_1 = require_tslib();
    var logging_1 = require_logging();
    var TimeStamper = function() {
      function TimeStamper2() {
      }
      TimeStamper2.prototype.generate = function() {
        return String(Date.now());
      };
      return TimeStamper2;
    }();
    exports.TimeStamper = TimeStamper;
    var GuaranteedChannel = function() {
      function GuaranteedChannel2(_a) {
        var _b;
        var channel = _a.channel, logger = _a.logger, stamper = _a.stamper, options = tslib_1.__rest(_a, ["channel", "logger", "stamper"]);
        this.closed = false;
        this.channel = channel;
        this.logger = logger !== null && logger !== void 0 ? logger : new logging_1.NullLogger();
        this.stamper = stamper;
        this.options = tslib_1.__assign(tslib_1.__assign({}, options), { ackTimeout: (_b = options.ackTimeout) !== null && _b !== void 0 ? _b : 5e3 });
      }
      GuaranteedChannel2.prototype.publish = function(message) {
        var _this = this;
        if (this.closed) {
          return Promise.reject(new Error("Channel is closed."));
        }
        return new Promise(function(resolve, reject) {
          var id = _this.stamper.generate(message);
          var timeoutTimer;
          var closeWatcher;
          var confirmed = false;
          var start = Date.now();
          var acknowledge = function(response) {
            if (response === id) {
              confirmed = true;
              var elapsed = Date.now() - start;
              window.clearTimeout(timeoutTimer);
              window.clearInterval(closeWatcher);
              _this.logger.debug("Delivery confirmed #".concat(id, ", elapsed ").concat(elapsed, "ms."));
              _this.channel.unsubscribe(acknowledge);
              resolve();
            }
          };
          _this.channel.subscribe(acknowledge);
          var abort = function(error) {
            window.clearTimeout(timeoutTimer);
            window.clearInterval(closeWatcher);
            _this.logger.error("Failed to send message #".concat(id));
            _this.channel.unsubscribe(acknowledge);
            reject(error);
          };
          var wait = function() {
            if (confirmed) {
              return;
            }
            closeWatcher = window.setInterval(function() {
              if (_this.closed) {
                abort(new Error("Connection deliberately closed."));
              }
            }, 0);
            _this.logger.debug("Waiting confirmation #".concat(id, "..."));
            timeoutTimer = window.setTimeout(function() {
              abort(new Error("Maximum confirmation time reached."));
            }, _this.options.ackTimeout);
          };
          _this.logger.debug("Sending message #".concat(id, "..."));
          _this.channel.publish({ id, message }).then(wait, abort);
        });
      };
      GuaranteedChannel2.prototype.close = function() {
        this.closed = true;
        return this.channel.close();
      };
      return GuaranteedChannel2;
    }();
    exports.GuaranteedChannel = GuaranteedChannel;
  }
});

// node_modules/@croct/sdk/channel/channel.js
var require_channel = __commonJS({
  "node_modules/@croct/sdk/channel/channel.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@croct/sdk/channel/beaconSocketChannel.js
var require_beaconSocketChannel = __commonJS({
  "node_modules/@croct/sdk/channel/beaconSocketChannel.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BeaconSocketChannel = void 0;
    var tslib_1 = require_tslib();
    var logging_1 = require_logging();
    var BeaconSocketChannel = function() {
      function BeaconSocketChannel2(configuration) {
        var _a, _b;
        this.listeners = [];
        this.connectionIndex = 0;
        this.socketFactory = configuration.channelFactory;
        this.logger = (_a = configuration.logger) !== null && _a !== void 0 ? _a : new logging_1.NullLogger();
        this.loggerFactory = (_b = configuration.loggerFactory) !== null && _b !== void 0 ? _b : function() {
          return new logging_1.NullLogger();
        };
        this.cidAssigner = configuration.cidAssigner;
        this.cidParameter = configuration.cidParameter;
        this.trackerEndpointUrl = configuration.trackerEndpointUrl;
        this.tokenParameter = configuration.tokenParameter;
        this.notify = this.notify.bind(this);
      }
      BeaconSocketChannel2.prototype.publish = function(_a) {
        var receiptId = _a.id, message = _a.message;
        return tslib_1.__awaiter(this, void 0, void 0, function() {
          var _b, token, timestamp, context, payload, _c;
          return tslib_1.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _b = JSON.parse(message), token = _b.token, timestamp = _b.timestamp, context = _b.context, payload = _b.payload;
                if (!(this.token !== token || this.socketChannel === void 0))
                  return [3, 4];
                if (!(this.socketChannel !== void 0))
                  return [3, 2];
                this.logger.info("Connection no longer valid for current message.");
                this.socketChannel.unsubscribe(this.notify);
                return [4, this.socketChannel.close()];
              case 1:
                _d.sent();
                _d.label = 2;
              case 2:
                this.token = token;
                _c = this;
                return [4, this.createSocketChannel(token)];
              case 3:
                _c.socketChannel = _d.sent();
                _d.label = 4;
              case 4:
                return [2, this.socketChannel.publish(JSON.stringify({
                  receiptId,
                  originalTime: timestamp,
                  departureTime: Date.now(),
                  context,
                  payload
                }))];
            }
          });
        });
      };
      BeaconSocketChannel2.prototype.createSocketChannel = function(token) {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
          var endpoint, _a, _b, _c, channel;
          return tslib_1.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                endpoint = new URL(this.trackerEndpointUrl);
                _b = (_a = endpoint.searchParams).append;
                _c = [this.cidParameter];
                return [4, this.cidAssigner.assignCid()];
              case 1:
                _b.apply(_a, _c.concat([_d.sent()]));
                if (token !== void 0) {
                  endpoint.searchParams.append(this.tokenParameter, token);
                }
                channel = this.socketFactory(endpoint.toString(), this.loggerFactory("WebSocket#".concat(this.connectionIndex)));
                this.connectionIndex += 1;
                channel.subscribe(this.notify);
                return [2, channel];
            }
          });
        });
      };
      BeaconSocketChannel2.prototype.subscribe = function(listener) {
        if (!this.listeners.includes(listener)) {
          this.listeners.push(listener);
        }
      };
      BeaconSocketChannel2.prototype.unsubscribe = function(listener) {
        var index = this.listeners.indexOf(listener);
        if (index >= 0) {
          this.listeners.splice(index, 1);
        }
      };
      BeaconSocketChannel2.prototype.notify = function(message) {
        var _this = this;
        var confirmation;
        try {
          confirmation = JSON.parse(message);
        } catch (_a) {
          this.logger.error("Invalid JSON message received.");
          return;
        }
        var _b = confirmation.violations, violations = _b === void 0 ? [] : _b, receiptId = confirmation.receiptId;
        violations.forEach(function(violation) {
          return _this.logger.error(violation.message);
        });
        if (receiptId !== null) {
          this.listeners.forEach(function(dispatch) {
            return dispatch(receiptId);
          });
        }
      };
      BeaconSocketChannel2.prototype.close = function() {
        if (this.socketChannel === void 0) {
          return Promise.resolve();
        }
        return this.socketChannel.close();
      };
      return BeaconSocketChannel2;
    }();
    exports.BeaconSocketChannel = BeaconSocketChannel;
  }
});

// node_modules/@croct/sdk/channel/encodedChannel.js
var require_encodedChannel = __commonJS({
  "node_modules/@croct/sdk/channel/encodedChannel.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EncodedChannel = void 0;
    var EncodedChannel = function() {
      function EncodedChannel2(channel, encoder) {
        this.channel = channel;
        this.encode = encoder;
      }
      EncodedChannel2.prototype.publish = function(message) {
        var _this = this;
        return this.encode(message).then(function(result) {
          return _this.channel.publish(result);
        });
      };
      EncodedChannel2.prototype.close = function() {
        return this.channel.close();
      };
      return EncodedChannel2;
    }();
    exports.EncodedChannel = EncodedChannel;
  }
});

// node_modules/@croct/sdk/channel/queuedChannel.js
var require_queuedChannel = __commonJS({
  "node_modules/@croct/sdk/channel/queuedChannel.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QueuedChannel = void 0;
    var tslib_1 = require_tslib();
    var logging_1 = require_logging();
    var QueuedChannel = function() {
      function QueuedChannel2(channel, queue, logger) {
        this.closed = false;
        this.channel = channel;
        this.queue = queue;
        this.logger = logger !== null && logger !== void 0 ? logger : new logging_1.NullLogger();
      }
      QueuedChannel2.prototype.flush = function() {
        if (this.pending === void 0) {
          return this.requeue();
        }
        return this.pending.catch(this.requeue.bind(this));
      };
      QueuedChannel2.prototype.publish = function(message) {
        var _this = this;
        if (this.closed) {
          return Promise.reject(new Error("Channel is closed."));
        }
        if (this.queue.length() >= this.queue.getCapacity()) {
          this.logger.warn("The queue is full, message rejected.");
          return Promise.reject(new Error("The queue is full."));
        }
        if (this.pending === void 0) {
          this.pending = this.queue.isEmpty() ? Promise.resolve() : Promise.reject(new Error("The queue must be flushed."));
        }
        this.enqueue(message);
        this.pending = this.pending.then(function() {
          return _this.channel.publish(message).then(_this.dequeue.bind(_this));
        });
        return this.pending;
      };
      QueuedChannel2.prototype.enqueue = function(message) {
        this.logger.debug("Enqueueing message...");
        this.logger.debug("Queue length: ".concat(this.queue.length() + 1));
        this.queue.push(message);
      };
      QueuedChannel2.prototype.dequeue = function() {
        this.logger.debug("Dequeuing message...");
        this.logger.debug("Queue length: ".concat(Math.max(0, this.queue.length() - 1)));
        this.queue.shift();
      };
      QueuedChannel2.prototype.requeue = function() {
        var e_1, _a;
        var _this = this;
        if (this.closed) {
          return Promise.reject(new Error("Channel is closed."));
        }
        this.pending = Promise.resolve();
        if (this.queue.isEmpty()) {
          return this.pending;
        }
        var length = this.queue.length();
        this.logger.debug("Requeuing messages...");
        this.logger.debug("Queue length: ".concat(length));
        var _loop_1 = function(message2) {
          this_1.pending = this_1.pending.then(function() {
            return _this.channel.publish(message2).then(_this.dequeue.bind(_this));
          });
        };
        var this_1 = this;
        try {
          for (var _b = tslib_1.__values(this.queue.all()), _c = _b.next(); !_c.done; _c = _b.next()) {
            var message = _c.value;
            _loop_1(message);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        return this.pending;
      };
      QueuedChannel2.prototype.close = function() {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
          var _a;
          return tslib_1.__generator(this, function(_b) {
            switch (_b.label) {
              case 0:
                this.closed = true;
                return [4, this.channel.close()];
              case 1:
                _b.sent();
                if (!(this.pending !== void 0))
                  return [3, 5];
                _b.label = 2;
              case 2:
                _b.trys.push([2, 4, , 5]);
                return [4, this.pending];
              case 3:
                _b.sent();
                return [3, 5];
              case 4:
                _a = _b.sent();
                return [3, 5];
              case 5:
                return [2];
            }
          });
        });
      };
      return QueuedChannel2;
    }();
    exports.QueuedChannel = QueuedChannel;
  }
});

// node_modules/@croct/sdk/channel/retryChannel.js
var require_retryChannel = __commonJS({
  "node_modules/@croct/sdk/channel/retryChannel.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RetryChannel = void 0;
    var tslib_1 = require_tslib();
    var logging_1 = require_logging();
    var RetryChannel = function() {
      function RetryChannel2(_a) {
        var channel = _a.channel, retryPolicy = _a.retryPolicy, logger = _a.logger;
        this.closed = false;
        this.channel = channel;
        this.retryPolicy = retryPolicy;
        this.logger = logger !== null && logger !== void 0 ? logger : new logging_1.NullLogger();
      }
      RetryChannel2.prototype.publish = function(message) {
        var _this = this;
        if (this.closed) {
          return Promise.reject(new Error("The channel is closed."));
        }
        return this.channel.publish(message).catch(function(error) {
          return _this.retry(message, error);
        });
      };
      RetryChannel2.prototype.retry = function(message, error) {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
          var attempt, _loop_1, this_1, state_1;
          var _this = this;
          return tslib_1.__generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                attempt = 0;
                _loop_1 = function() {
                  var delay, _b, _c;
                  return tslib_1.__generator(this, function(_d) {
                    switch (_d.label) {
                      case 0:
                        if (this_1.closed) {
                          throw new Error("Connection deliberately closed.");
                        }
                        delay = this_1.retryPolicy.getDelay(attempt);
                        this_1.logger.debug("Retry attempt ".concat(attempt + 1));
                        if (!(delay > 0))
                          return [3, 2];
                        this_1.logger.debug("Retry attempt delayed in ".concat(delay, "ms"));
                        return [4, new Promise(function(resolve, reject) {
                          var closeWatcher = window.setInterval(function() {
                            if (_this.closed) {
                              window.clearInterval(closeWatcher);
                              reject(new Error("Connection deliberately closed."));
                            }
                          }, 0);
                          window.setTimeout(function() {
                            window.clearInterval(closeWatcher);
                            resolve();
                          }, delay);
                        })];
                      case 1:
                        _d.sent();
                        _d.label = 2;
                      case 2:
                        _d.trys.push([2, 4, , 5]);
                        _b = {};
                        return [4, this_1.channel.publish(message)];
                      case 3:
                        return [2, (_b.value = _d.sent(), _b)];
                      case 4:
                        _c = _d.sent();
                        attempt += 1;
                        return [3, 5];
                      case 5:
                        return [2];
                    }
                  });
                };
                this_1 = this;
                _a.label = 1;
              case 1:
                if (!this.retryPolicy.shouldRetry(attempt, message, error))
                  return [3, 3];
                return [5, _loop_1()];
              case 2:
                state_1 = _a.sent();
                if (typeof state_1 === "object")
                  return [2, state_1.value];
                return [3, 1];
              case 3:
                throw new Error("Maximum retry attempts reached.");
            }
          });
        });
      };
      RetryChannel2.prototype.close = function() {
        this.closed = true;
        return this.channel.close();
      };
      return RetryChannel2;
    }();
    exports.RetryChannel = RetryChannel;
  }
});

// node_modules/@croct/sdk/channel/sandboxChannel.js
var require_sandboxChannel = __commonJS({
  "node_modules/@croct/sdk/channel/sandboxChannel.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SandboxChannel = void 0;
    var SandboxChannel = function() {
      function SandboxChannel2() {
        this.listeners = [];
        this.messages = [];
        this.closed = false;
      }
      SandboxChannel2.prototype.publish = function(message) {
        this.messages.push(message);
        return Promise.resolve();
      };
      SandboxChannel2.prototype.notify = function(message) {
        this.listeners.forEach(function(dispatch) {
          return dispatch(message);
        });
      };
      SandboxChannel2.prototype.subscribe = function(listener) {
        if (!this.listeners.includes(listener)) {
          this.listeners.push(listener);
        }
      };
      SandboxChannel2.prototype.unsubscribe = function(listener) {
        var index = this.listeners.indexOf(listener);
        if (index >= 0) {
          this.listeners.splice(index, 1);
        }
      };
      SandboxChannel2.prototype.close = function() {
        this.closed = true;
        return Promise.resolve();
      };
      SandboxChannel2.prototype.isClosed = function() {
        return this.closed;
      };
      return SandboxChannel2;
    }();
    exports.SandboxChannel = SandboxChannel;
  }
});

// node_modules/@croct/sdk/channel/socketChannel.js
var require_socketChannel = __commonJS({
  "node_modules/@croct/sdk/channel/socketChannel.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SocketChannel = void 0;
    var tslib_1 = require_tslib();
    var logging_1 = require_logging();
    var error_1 = require_error();
    var SocketChannel = function() {
      function SocketChannel2(_a) {
        var _b, _c, _d;
        var url = _a.url, logger = _a.logger, options = tslib_1.__rest(_a, ["url", "logger"]);
        this.listeners = [];
        this.closed = false;
        this.url = url;
        this.logger = logger !== null && logger !== void 0 ? logger : new logging_1.NullLogger();
        this.options = tslib_1.__assign(tslib_1.__assign({}, options), { closeTimeout: (_b = options.closeTimeout) !== null && _b !== void 0 ? _b : 5e3, connectionTimeout: (_c = options.connectionTimeout) !== null && _c !== void 0 ? _c : 1e4, protocols: (_d = options.protocols) !== null && _d !== void 0 ? _d : [] });
      }
      Object.defineProperty(SocketChannel2.prototype, "connected", {
        get: function() {
          if (this.connection === void 0) {
            return Promise.resolve(false);
          }
          return this.connection.then(function() {
            return true;
          }, function() {
            return false;
          });
        },
        enumerable: false,
        configurable: true
      });
      SocketChannel2.prototype.publish = function(message) {
        var _this = this;
        return this.connect().then(function(socket) {
          socket.send(message);
          _this.logger.debug("Message sent.");
        });
      };
      SocketChannel2.prototype.subscribe = function(listener) {
        if (!this.listeners.includes(listener)) {
          this.listeners.push(listener);
        }
      };
      SocketChannel2.prototype.unsubscribe = function(listener) {
        var index = this.listeners.indexOf(listener);
        if (index >= 0) {
          this.listeners.splice(index, 1);
        }
      };
      SocketChannel2.prototype.notify = function(message) {
        this.listeners.forEach(function(dispatch) {
          return dispatch(message);
        });
      };
      SocketChannel2.prototype.connect = function() {
        var _this = this;
        if (this.closed) {
          return Promise.reject(new Error("Channel has been closed."));
        }
        if (this.connection !== void 0) {
          return this.connection.then(function(connection) {
            var state = connection.readyState;
            if (state === WebSocket.OPEN) {
              return connection;
            }
            throw new Error("Connection lost.");
          }).catch(function() {
            delete _this.connection;
            return _this.connect();
          });
        }
        this.connection = new Promise(function(resolve, reject) {
          _this.logger.debug("Connecting...");
          var connection = new window.WebSocket(_this.url, _this.options.protocols);
          if (_this.options.binaryType) {
            connection.binaryType = _this.options.binaryType;
          }
          var abortListener = function() {
            var reason = "Maximum connection timeout reached.";
            _this.logger.error(reason);
            reject(new Error(reason));
            connection.close(1e3, reason);
          };
          var abortTimer = window.setTimeout(abortListener, _this.options.connectionTimeout);
          var openListener = function() {
            window.clearTimeout(abortTimer);
            _this.logger.info("Connection established.");
            connection.removeEventListener("open", openListener);
            resolve(connection);
          };
          var errorListener = function() {
            if (!_this.closed) {
              _this.logger.error("Connection error.");
            }
          };
          var messageListener = function(event) {
            _this.logger.debug("Message received.");
            _this.notify(event.data);
          };
          var closeListener = function(event) {
            window.clearTimeout(abortTimer);
            var reason = "".concat((0, error_1.formatCause)(event.reason || "unknown"), " (code ").concat(event.code, ")");
            var message = "Connection has been closed, reason: ".concat(reason);
            if (!_this.closed) {
              _this.logger.info(message);
            }
            connection.removeEventListener("open", openListener);
            connection.removeEventListener("error", errorListener);
            connection.removeEventListener("close", closeListener);
            connection.removeEventListener("message", messageListener);
            reject(new Error(message));
          };
          connection.addEventListener("open", openListener, { once: true });
          connection.addEventListener("close", closeListener, { once: true });
          connection.addEventListener("error", errorListener);
          connection.addEventListener("message", messageListener);
        });
        return this.connection;
      };
      SocketChannel2.prototype.close = function() {
        var _this = this;
        this.logger.debug("Closing connection...");
        return new Promise(function(resolve, reject) {
          _this.closed = true;
          if (_this.connection === void 0) {
            _this.logger.debug("Connection is not open.");
            resolve();
            return;
          }
          _this.connection.then(function(connection) {
            var abortTimer;
            var abort = function() {
              _this.logger.warn("Connection could not be closed within the timeout period.");
              reject(new Error("Maximum close timeout reached."));
            };
            var close = function() {
              window.clearTimeout(abortTimer);
              _this.logger.info("Connection gracefully closed.");
              resolve();
            };
            connection.addEventListener("close", close, { once: true });
            connection.close(1e3, "Deliberate disconnection.");
            abortTimer = window.setTimeout(abort, _this.options.closeTimeout);
          }, function() {
            _this.logger.info("Connection closed.");
            resolve();
          });
        });
      };
      return SocketChannel2;
    }();
    exports.SocketChannel = SocketChannel;
  }
});

// node_modules/@croct/sdk/channel/index.js
var require_channel2 = __commonJS({
  "node_modules/@croct/sdk/channel/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SocketChannel = exports.SandboxChannel = exports.RetryChannel = exports.QueuedChannel = exports.GuaranteedChannel = exports.EncodedChannel = exports.BeaconSocketChannel = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_channel(), exports);
    var beaconSocketChannel_1 = require_beaconSocketChannel();
    Object.defineProperty(exports, "BeaconSocketChannel", { enumerable: true, get: function() {
      return beaconSocketChannel_1.BeaconSocketChannel;
    } });
    var encodedChannel_1 = require_encodedChannel();
    Object.defineProperty(exports, "EncodedChannel", { enumerable: true, get: function() {
      return encodedChannel_1.EncodedChannel;
    } });
    var guaranteedChannel_1 = require_guaranteedChannel();
    Object.defineProperty(exports, "GuaranteedChannel", { enumerable: true, get: function() {
      return guaranteedChannel_1.GuaranteedChannel;
    } });
    var queuedChannel_1 = require_queuedChannel();
    Object.defineProperty(exports, "QueuedChannel", { enumerable: true, get: function() {
      return queuedChannel_1.QueuedChannel;
    } });
    var retryChannel_1 = require_retryChannel();
    Object.defineProperty(exports, "RetryChannel", { enumerable: true, get: function() {
      return retryChannel_1.RetryChannel;
    } });
    var sandboxChannel_1 = require_sandboxChannel();
    Object.defineProperty(exports, "SandboxChannel", { enumerable: true, get: function() {
      return sandboxChannel_1.SandboxChannel;
    } });
    var socketChannel_1 = require_socketChannel();
    Object.defineProperty(exports, "SocketChannel", { enumerable: true, get: function() {
      return socketChannel_1.SocketChannel;
    } });
  }
});

// node_modules/@croct/sdk/container.js
var require_container = __commonJS({
  "node_modules/@croct/sdk/container.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Container = void 0;
    var tslib_1 = require_tslib();
    var logging_1 = require_logging();
    var context_1 = require_context();
    var namespacedStorage_1 = require_namespacedStorage();
    var retry_1 = require_retry();
    var queue_1 = require_queue2();
    var tracker_1 = require_tracker();
    var evaluator_1 = require_evaluator();
    var transformer_1 = require_transformer();
    var cid_1 = require_cid();
    var eventManager_1 = require_eventManager();
    var cache_1 = require_cache2();
    var guaranteedChannel_1 = require_guaranteedChannel();
    var channel_1 = require_channel2();
    var Container = function() {
      function Container2(configuration) {
        this.eventManager = new eventManager_1.SynchronousEventManager();
        this.configuration = configuration;
      }
      Container2.prototype.getConfiguration = function() {
        return this.configuration;
      };
      Container2.prototype.getEvaluator = function() {
        if (this.evaluator === void 0) {
          this.evaluator = this.createEvaluator();
        }
        return this.evaluator;
      };
      Container2.prototype.createEvaluator = function() {
        return new evaluator_1.Evaluator({
          appId: this.configuration.appId,
          endpointUrl: this.configuration.evaluationEndpointUrl,
          tokenProvider: this.getTokenProvider(),
          cidAssigner: this.getCidAssigner()
        });
      };
      Container2.prototype.getTracker = function() {
        if (this.tracker === void 0) {
          this.tracker = this.createTracker();
        }
        return this.tracker;
      };
      Container2.prototype.createTracker = function() {
        var context = this.getContext();
        var tracker = new tracker_1.Tracker({
          tab: context.getTab(),
          tokenProvider: this.getTokenProvider(),
          inactivityRetryPolicy: new retry_1.ArbitraryPolicy([3e4, 3e4, 12e4, 12e4, 3e5, 3e5, 9e5]),
          logger: this.getLogger("Tracker"),
          channel: this.getBeaconChannel(),
          eventMetadata: this.configuration.eventMetadata || {}
        });
        var queue = this.getBeaconQueue();
        queue.addCallback("halfEmpty", tracker.unsuspend);
        queue.addCallback("full", tracker.suspend);
        return tracker;
      };
      Container2.prototype.getTokenProvider = function() {
        if (this.tokenProvider === void 0) {
          var context = this.getContext();
          this.tokenProvider = { getToken: context.getToken.bind(context) };
        }
        return this.tokenProvider;
      };
      Container2.prototype.getContext = function() {
        if (this.context === void 0) {
          this.context = this.createContext();
        }
        return this.context;
      };
      Container2.prototype.createContext = function() {
        var tokenKey = this.resolveStorageNamespace("token");
        var tabKey = this.resolveStorageNamespace("tab");
        var browserStorage = this.getLocalStorage();
        var browserCache = new cache_1.LocalStorageCache(browserStorage, tokenKey);
        var tabStorage = this.getSessionStorage();
        this.removeTokenSyncListener = cache_1.LocalStorageCache.autoSync(browserCache);
        return context_1.Context.load({
          tokenScope: this.configuration.tokenScope,
          eventDispatcher: this.getEventManager(),
          urlSanitizer: this.configuration.urlSanitizer,
          cache: {
            tabId: new cache_1.LocalStorageCache(tabStorage, tabKey),
            tabToken: new cache_1.LocalStorageCache(tabStorage, tokenKey),
            browserToken: browserCache
          }
        });
      };
      Container2.prototype.getBeaconChannel = function() {
        if (this.beaconChannel === void 0) {
          this.beaconChannel = this.createBeaconChannel();
        }
        return this.beaconChannel;
      };
      Container2.prototype.createBeaconChannel = function() {
        if (this.configuration.test) {
          return new channel_1.SandboxChannel();
        }
        var channelLogger = this.getLogger("BeaconChannel");
        var _a = this.configuration, appId = _a.appId, trackerEndpointUrl = _a.trackerEndpointUrl;
        var queuedChannel = new channel_1.QueuedChannel(new channel_1.RetryChannel({
          channel: new channel_1.GuaranteedChannel({
            channel: new channel_1.BeaconSocketChannel({
              trackerEndpointUrl: "".concat(trackerEndpointUrl, "/").concat(appId),
              tokenParameter: "token",
              loggerFactory: this.getLogger.bind(this),
              logger: channelLogger,
              channelFactory: function(url, logger) {
                return new channel_1.SocketChannel({ url, logger });
              },
              cidAssigner: this.getCidAssigner(),
              cidParameter: "clientId"
            }),
            stamper: new guaranteedChannel_1.TimeStamper(),
            ackTimeout: 1e4,
            logger: channelLogger
          }),
          retryPolicy: new retry_1.BackoffPolicy({
            minRetryDelay: 1e3,
            maxRetryDelay: 60 * 1e3,
            backoffFactor: 1.5,
            backoffJitter: 1
          }),
          logger: channelLogger
        }), this.getBeaconQueue(), channelLogger);
        queuedChannel.flush().catch(function() {
        });
        return new channel_1.EncodedChannel(queuedChannel, transformer_1.encodeJson);
      };
      Container2.prototype.getCidAssigner = function() {
        if (this.cidAssigner === void 0) {
          this.cidAssigner = this.createCidAssigner();
        }
        return this.cidAssigner;
      };
      Container2.prototype.createCidAssigner = function() {
        if (this.configuration.cid !== void 0) {
          return new cid_1.FixedAssigner(this.configuration.cid);
        }
        if (this.configuration.test) {
          return new cid_1.FixedAssigner("00000000-0000-0000-0000-000000000000");
        }
        var logger = this.getLogger("CidAssigner");
        return new cid_1.CachedAssigner(new cid_1.RemoteAssigner(this.configuration.bootstrapEndpointUrl, logger), new cache_1.LocalStorageCache(this.getLocalStorage(), "croct.cid"), logger);
      };
      Container2.prototype.getBeaconQueue = function() {
        if (this.beaconQueue === void 0) {
          this.beaconQueue = this.createBeaconQueue();
        }
        return this.beaconQueue;
      };
      Container2.prototype.createBeaconQueue = function() {
        var context = this.getContext();
        var tab = context.getTab();
        return new queue_1.MonitoredQueue(new queue_1.CapacityRestrictedQueue(new queue_1.PersistentQueue(this.getGlobalTabStorage("queue"), tab.id), this.configuration.beaconQueueSize), this.getLogger("BeaconQueue"));
      };
      Container2.prototype.getLogger = function() {
        var namespace = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          namespace[_i] = arguments[_i];
        }
        var prefix = "Croct".concat(namespace.length === 0 ? "" : ":".concat(namespace.join(":")));
        if (this.configuration.logger !== void 0) {
          return new logging_1.NamespacedLogger(this.configuration.logger, prefix);
        }
        if (this.configuration.debug) {
          return new logging_1.ConsoleLogger(prefix);
        }
        return new logging_1.NullLogger();
      };
      Container2.prototype.getTabStorage = function(namespace) {
        var subnamespace = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          subnamespace[_i - 1] = arguments[_i];
        }
        return this.getGlobalTabStorage.apply(this, tslib_1.__spreadArray(["external", namespace], tslib_1.__read(subnamespace), false));
      };
      Container2.prototype.getBrowserStorage = function(namespace) {
        var subnamespace = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          subnamespace[_i - 1] = arguments[_i];
        }
        return this.getGlobalBrowserStorage.apply(this, tslib_1.__spreadArray(["external", namespace], tslib_1.__read(subnamespace), false));
      };
      Container2.prototype.getGlobalTabStorage = function(namespace) {
        var subnamespace = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          subnamespace[_i - 1] = arguments[_i];
        }
        return new namespacedStorage_1.NamespacedStorage(this.getSessionStorage(), this.resolveStorageNamespace.apply(this, tslib_1.__spreadArray([namespace], tslib_1.__read(subnamespace), false)));
      };
      Container2.prototype.getGlobalBrowserStorage = function(namespace) {
        var subnamespace = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          subnamespace[_i - 1] = arguments[_i];
        }
        return new namespacedStorage_1.NamespacedStorage(this.getLocalStorage(), this.resolveStorageNamespace.apply(this, tslib_1.__spreadArray([namespace], tslib_1.__read(subnamespace), false)));
      };
      Container2.prototype.resolveStorageNamespace = function(namespace) {
        var subnamespace = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          subnamespace[_i - 1] = arguments[_i];
        }
        return "croct[".concat(this.configuration.appId.toLowerCase(), "].").concat([namespace].concat(subnamespace).join("."));
      };
      Container2.prototype.getLocalStorage = function() {
        return localStorage;
      };
      Container2.prototype.getSessionStorage = function() {
        return sessionStorage;
      };
      Container2.prototype.getEventManager = function() {
        return this.eventManager;
      };
      Container2.prototype.dispose = function() {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
          var logger;
          return tslib_1.__generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                logger = this.getLogger();
                if (!this.beaconChannel)
                  return [3, 2];
                logger.debug("Closing beacon channel...");
                return [4, this.beaconChannel.close()];
              case 1:
                _a.sent();
                _a.label = 2;
              case 2:
                if (this.removeTokenSyncListener) {
                  logger.debug("Removing token sync listener...");
                  this.removeTokenSyncListener();
                }
                if (!this.tracker)
                  return [3, 4];
                if (this.beaconQueue) {
                  logger.debug("Removing queue listeners...");
                  this.beaconQueue.removeCallback("halfEmpty", this.tracker.unsuspend);
                  this.beaconQueue.removeCallback("full", this.tracker.suspend);
                }
                logger.debug("Suspending tracker...");
                this.tracker.suspend();
                return [4, this.tracker.flushed];
              case 3:
                _a.sent();
                _a.label = 4;
              case 4:
                delete this.context;
                delete this.tokenProvider;
                delete this.cidAssigner;
                delete this.tracker;
                delete this.evaluator;
                delete this.beaconChannel;
                delete this.beaconQueue;
                delete this.removeTokenSyncListener;
                logger.debug("Container resources released.");
                return [2];
            }
          });
        });
      };
      return Container2;
    }();
    exports.Container = Container;
  }
});

// node_modules/@croct/sdk/sdk.js
var require_sdk = __commonJS({
  "node_modules/@croct/sdk/sdk.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sdk = void 0;
    var tslib_1 = require_tslib();
    var container_1 = require_container();
    var constants_1 = require_constants();
    var schema_1 = require_schema2();
    var error_1 = require_error();
    function validateConfiguration(configuration) {
      if (typeof configuration !== "object" || configuration === null) {
        throw new Error("The configuration must be a key-value map.");
      }
      try {
        schema_1.sdkConfigurationSchema.validate(configuration);
      } catch (violation) {
        throw new Error("Invalid configuration: ".concat((0, error_1.formatCause)(violation)));
      }
    }
    var Sdk = function() {
      function Sdk2(container) {
        this.container = container;
      }
      Sdk2.init = function(configuration) {
        var e_1, _a;
        var _b, _c, _d, _e;
        validateConfiguration(configuration);
        var _f = configuration.eventMetadata, customMetadata = _f === void 0 ? {} : _f, containerConfiguration = tslib_1.__rest(configuration, ["eventMetadata"]);
        var eventMetadata = {
          sdkVersion: constants_1.VERSION
        };
        try {
          for (var _g = tslib_1.__values(Object.keys(customMetadata)), _h = _g.next(); !_h.done; _h = _g.next()) {
            var metadata = _h.value;
            eventMetadata["custom_".concat(metadata)] = customMetadata[metadata];
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_h && !_h.done && (_a = _g.return))
              _a.call(_g);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        var container = new container_1.Container(tslib_1.__assign(tslib_1.__assign({}, containerConfiguration), { evaluationEndpointUrl: (_b = containerConfiguration.evaluationEndpointUrl) !== null && _b !== void 0 ? _b : constants_1.EVALUATION_ENDPOINT_URL, trackerEndpointUrl: (_c = containerConfiguration.trackerEndpointUrl) !== null && _c !== void 0 ? _c : constants_1.TRACKER_ENDPOINT_URL, bootstrapEndpointUrl: (_d = containerConfiguration.bootstrapEndpointUrl) !== null && _d !== void 0 ? _d : constants_1.BOOTSTRAP_ENDPOINT_URL, beaconQueueSize: (_e = containerConfiguration.beaconQueueSize) !== null && _e !== void 0 ? _e : 100, eventMetadata }));
        var logger = container.getLogger();
        var _j = container.getConfiguration(), appId = _j.appId, tokenScope = _j.tokenScope;
        logger.debug("\n\n \u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2001  \u2588\u2588\u2588\u2588\u2588\u2588\u2001  \u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001\n\u2588\u2588\u2001\u2001\u2001\u2001\u2001\u2001\u2588\u2588\u2001\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2001\u2001\u2001\u2001\u2001\u2001\u2001\u2588\u2588\u2001\u2001\u2001\u2001\n\u2588\u2588\u2001     \u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2001\u2588\u2588\u2001   \u2588\u2588\u2001\u2588\u2588\u2001        \u2588\u2588\u2001\u2001\u2001\u2001\n\u2588\u2588\u2001     \u2588\u2588\u2001\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2001   \u2588\u2588\u2001\u2588\u2588\u2001        \u2588\u2588\u2001\u2001\u2001\u2001\n \u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2001  \u2588\u2588\u2001\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2001\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2001   \u2588\u2588\u2001\u2001\u2001\u2001\n\n");
        logger.info("Initializing SDK v".concat(constants_1.VERSION, "..."));
        logger.debug("App ID: ".concat(appId));
        var context = container.getContext();
        var tab = context.getTab();
        var user = context.getUser();
        logger.debug("".concat(tab.isNew ? "New" : "Current", " tab: ").concat(tab.id));
        logger.debug("Token scope: ".concat(tokenScope));
        logger.debug("Current user: ".concat(user !== null ? user : "anonymous"));
        logger.debug("Test mode: ".concat(containerConfiguration.test));
        logger.info("\u26A1 Croct SDK is ready!");
        return new Sdk2(container);
      };
      Object.defineProperty(Sdk2.prototype, "appId", {
        get: function() {
          var appId = this.container.getConfiguration().appId;
          return appId;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Sdk2.prototype, "cidAssigner", {
        get: function() {
          return this.container.getCidAssigner();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Sdk2.prototype, "context", {
        get: function() {
          return this.container.getContext();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Sdk2.prototype, "tracker", {
        get: function() {
          return this.container.getTracker();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Sdk2.prototype, "evaluator", {
        get: function() {
          return this.container.getEvaluator();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Sdk2.prototype, "eventManager", {
        get: function() {
          return this.container.getEventManager();
        },
        enumerable: false,
        configurable: true
      });
      Sdk2.prototype.getLogger = function() {
        var _a;
        var namespace = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          namespace[_i] = arguments[_i];
        }
        return (_a = this.container).getLogger.apply(_a, tslib_1.__spreadArray([], tslib_1.__read(namespace), false));
      };
      Sdk2.prototype.getTabStorage = function(namespace) {
        var _a;
        var subnamespace = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          subnamespace[_i - 1] = arguments[_i];
        }
        return (_a = this.container).getTabStorage.apply(_a, tslib_1.__spreadArray([namespace], tslib_1.__read(subnamespace), false));
      };
      Sdk2.prototype.getBrowserStorage = function(namespace) {
        var _a;
        var subnamespace = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          subnamespace[_i - 1] = arguments[_i];
        }
        return (_a = this.container).getBrowserStorage.apply(_a, tslib_1.__spreadArray([namespace], tslib_1.__read(subnamespace), false));
      };
      Sdk2.prototype.close = function() {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
          var logger;
          return tslib_1.__generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                if (this.closed) {
                  return [2];
                }
                logger = this.getLogger();
                logger.debug("Closing SDK...");
                this.closed = true;
                return [4, this.container.dispose()];
              case 1:
                _a.sent();
                logger.info("SDK closed.");
                return [2];
            }
          });
        });
      };
      return Sdk2;
    }();
    exports.Sdk = Sdk;
  }
});

// node_modules/@croct/sdk/facade/sessionPatch.js
var require_sessionPatch = __commonJS({
  "node_modules/@croct/sdk/facade/sessionPatch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SessionPatch = void 0;
    var tslib_1 = require_tslib();
    var activeRecord_1 = require_activeRecord();
    var SessionPatch = function(_super) {
      tslib_1.__extends(SessionPatch2, _super);
      function SessionPatch2(tracker) {
        var _this = _super.call(this) || this;
        _this.tracker = tracker;
        return _this;
      }
      SessionPatch2.prototype.save = function() {
        if (!this.isDirty()) {
          return Promise.resolve({
            type: "sessionAttributesChanged",
            patch: { operations: [] }
          });
        }
        var promise = this.tracker.track({
          type: "sessionAttributesChanged",
          patch: this.buildPatch()
        });
        this.reset();
        return promise;
      };
      return SessionPatch2;
    }(activeRecord_1.ActiveRecord);
    exports.SessionPatch = SessionPatch;
  }
});

// node_modules/@croct/sdk/facade/sessionFacade.js
var require_sessionFacade = __commonJS({
  "node_modules/@croct/sdk/facade/sessionFacade.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SessionFacade = void 0;
    var sessionPatch_1 = require_sessionPatch();
    var SessionFacade = function() {
      function SessionFacade2(tracker) {
        this.tracker = tracker;
      }
      SessionFacade2.prototype.edit = function() {
        return new sessionPatch_1.SessionPatch(this.tracker);
      };
      return SessionFacade2;
    }();
    exports.SessionFacade = SessionFacade;
  }
});

// node_modules/@croct/sdk/facade/sdkFacade.js
var require_sdkFacade = __commonJS({
  "node_modules/@croct/sdk/facade/sdkFacade.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SdkFacade = void 0;
    var tslib_1 = require_tslib();
    var evaluatorFacade_1 = require_evaluatorFacade();
    var trackerFacade_1 = require_trackerFacade();
    var userFacade_1 = require_userFacade();
    var token_1 = require_token2();
    var error_1 = require_error();
    var schema_1 = require_schema2();
    var sdk_1 = require_sdk();
    var sessionFacade_1 = require_sessionFacade();
    function validateConfiguration(configuration) {
      if (typeof configuration !== "object" || configuration === null) {
        throw new Error("The configuration must be a key-value map.");
      }
      try {
        schema_1.sdkFacadeConfigurationSchema.validate(configuration);
      } catch (violation) {
        throw new Error("Invalid configuration: ".concat((0, error_1.formatCause)(violation)));
      }
    }
    var SdkFacade = function() {
      function SdkFacade2(sdk) {
        this.sdk = sdk;
      }
      SdkFacade2.init = function(configuration) {
        var _a, _b, _c;
        validateConfiguration(configuration);
        var _d = configuration.track, track = _d === void 0 ? true : _d, userId = configuration.userId, token = configuration.token, containerConfiguration = tslib_1.__rest(configuration, ["track", "userId", "token"]);
        if (userId !== void 0 && token !== void 0) {
          throw new Error("Either the user ID or token can be specified, but not both.");
        }
        var sdk = new SdkFacade2(sdk_1.Sdk.init(tslib_1.__assign(tslib_1.__assign({}, containerConfiguration), { tokenScope: (_a = containerConfiguration.tokenScope) !== null && _a !== void 0 ? _a : "global", debug: (_b = containerConfiguration.debug) !== null && _b !== void 0 ? _b : false, test: (_c = containerConfiguration.test) !== null && _c !== void 0 ? _c : false })));
        if (userId !== void 0) {
          sdk.identify(userId);
        } else if (token !== void 0) {
          if (token === null) {
            sdk.unsetToken();
          } else {
            sdk.setToken(token_1.Token.parse(token));
          }
        }
        if (track) {
          sdk.tracker.enable();
        }
        return sdk;
      };
      Object.defineProperty(SdkFacade2.prototype, "context", {
        get: function() {
          return this.sdk.context;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(SdkFacade2.prototype, "cidAssigner", {
        get: function() {
          return this.sdk.cidAssigner;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(SdkFacade2.prototype, "tracker", {
        get: function() {
          if (this.trackerFacade === void 0) {
            this.trackerFacade = new trackerFacade_1.TrackerFacade(this.sdk.tracker);
          }
          return this.trackerFacade;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(SdkFacade2.prototype, "user", {
        get: function() {
          if (this.userFacade === void 0) {
            this.userFacade = new userFacade_1.UserFacade(this.context, this.sdk.tracker);
          }
          return this.userFacade;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(SdkFacade2.prototype, "session", {
        get: function() {
          if (this.sessionFacade === void 0) {
            this.sessionFacade = new sessionFacade_1.SessionFacade(this.sdk.tracker);
          }
          return this.sessionFacade;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(SdkFacade2.prototype, "evaluator", {
        get: function() {
          if (this.evaluatorFacade === void 0) {
            this.evaluatorFacade = new evaluatorFacade_1.EvaluatorFacade(this.sdk.evaluator, new evaluatorFacade_1.TabContextFactory(this.sdk.context.getTab()));
          }
          return this.evaluatorFacade;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(SdkFacade2.prototype, "eventManager", {
        get: function() {
          var eventManager = this.sdk.eventManager;
          return {
            addListener: eventManager.addListener.bind(eventManager),
            removeListener: eventManager.removeListener.bind(eventManager),
            dispatch: function(eventName, event) {
              if (!/[a-z][a-z_]+\.[a-z][a-z_]+/i.test(eventName)) {
                throw new Error('The event name must be in the form of "namespaced.eventName", where both the namespace and event name must start with a letter, followed by any series of letters and underscores.');
              }
              eventManager.dispatch(eventName, event);
            }
          };
        },
        enumerable: false,
        configurable: true
      });
      SdkFacade2.prototype.identify = function(userId) {
        this.setToken(token_1.Token.issue(this.sdk.appId, userId));
      };
      SdkFacade2.prototype.anonymize = function() {
        if (!this.context.isAnonymous()) {
          this.unsetToken();
        }
      };
      SdkFacade2.prototype.getToken = function() {
        return this.context.getToken();
      };
      SdkFacade2.prototype.setToken = function(token) {
        var _a;
        var currentToken = this.getToken();
        if (currentToken !== null && currentToken.toString() === token.toString()) {
          return;
        }
        var currentSubject = (_a = currentToken === null || currentToken === void 0 ? void 0 : currentToken.getSubject()) !== null && _a !== void 0 ? _a : null;
        var subject = token.getSubject();
        var logger = this.getLogger();
        if (subject === currentSubject) {
          this.context.setToken(token);
          logger.debug("Token refreshed");
          return;
        }
        if (currentSubject !== null) {
          this.trackInternalEvent({
            type: "userSignedOut",
            userId: currentSubject
          });
          logger.info("User signed out");
        }
        this.context.setToken(token);
        if (subject !== null) {
          this.trackInternalEvent({
            type: "userSignedIn",
            userId: subject
          });
          logger.info("User signed in as ".concat(subject));
        }
        logger.debug("New token saved, ");
      };
      SdkFacade2.prototype.unsetToken = function() {
        var token = this.getToken();
        if (token === null) {
          return;
        }
        var logger = this.getLogger();
        var subject = token.getSubject();
        if (subject !== null) {
          this.trackInternalEvent({
            type: "userSignedOut",
            userId: subject
          });
          logger.info("User signed out");
        }
        this.context.setToken(null);
        logger.debug("Token removed");
      };
      SdkFacade2.prototype.trackInternalEvent = function(event) {
        this.sdk.tracker.track(event).catch(function() {
        });
      };
      SdkFacade2.prototype.getLogger = function() {
        var _a;
        var namespace = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          namespace[_i] = arguments[_i];
        }
        return (_a = this.sdk).getLogger.apply(_a, tslib_1.__spreadArray([], tslib_1.__read(namespace), false));
      };
      SdkFacade2.prototype.getTabStorage = function(namespace) {
        var _a;
        var subnamespace = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          subnamespace[_i - 1] = arguments[_i];
        }
        return (_a = this.sdk).getTabStorage.apply(_a, tslib_1.__spreadArray([namespace], tslib_1.__read(subnamespace), false));
      };
      SdkFacade2.prototype.getBrowserStorage = function(namespace) {
        var _a;
        var subnamespace = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          subnamespace[_i - 1] = arguments[_i];
        }
        return (_a = this.sdk).getBrowserStorage.apply(_a, tslib_1.__spreadArray([namespace], tslib_1.__read(subnamespace), false));
      };
      SdkFacade2.prototype.close = function() {
        return this.sdk.close();
      };
      return SdkFacade2;
    }();
    exports.SdkFacade = SdkFacade;
  }
});

// node_modules/@croct/sdk/index.js
var require_sdk2 = __commonJS({
  "node_modules/@croct/sdk/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VERSION = exports.Sdk = void 0;
    var constants_1 = require_constants();
    Object.defineProperty(exports, "VERSION", { enumerable: true, get: function() {
      return constants_1.VERSION;
    } });
    var sdk_1 = require_sdk();
    Object.defineProperty(exports, "Sdk", { enumerable: true, get: function() {
      return sdk_1.Sdk;
    } });
  }
});

// node_modules/@croct/plug/constants.js
var require_constants2 = __commonJS({
  "node_modules/@croct/plug/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PLAYGROUND_CONNECT_URL = exports.PLAYGROUND_ORIGIN = exports.CDN_URL = void 0;
    exports.CDN_URL = "https://cdn.croct.io/js/v1/lib/plug.js";
    exports.PLAYGROUND_ORIGIN = "https://play.croct.com";
    exports.PLAYGROUND_CONNECT_URL = "https://play.croct.com/connect.html";
  }
});

// node_modules/@croct/plug/playground.js
var require_playground = __commonJS({
  "node_modules/@croct/plug/playground.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PlaygroundPlugin = exports.factory = void 0;
    var error_1 = require_error();
    var evaluatorFacade_1 = require_evaluatorFacade();
    var constants_1 = require_constants2();
    var factory = function(_a) {
      var sdk = _a.sdk, options = _a.options;
      return new PlaygroundPlugin({
        sdkVersion: sdk.version,
        appId: sdk.appId,
        connectionId: options.connectionId,
        tab: sdk.tab,
        storage: sdk.getTabStorage(),
        tokenProvider: sdk.tokenStore,
        cidAssigner: sdk.cidAssigner,
        contextFactory: new evaluatorFacade_1.TabContextFactory(sdk.tab),
        eventSubscriber: sdk.eventManager,
        logger: sdk.getLogger()
      });
    };
    exports.factory = factory;
    var CONNECTION_PARAMETER = "__cplay";
    var PlaygroundPlugin = function() {
      function PlaygroundPlugin2(configuration) {
        this.sdkVersion = configuration.sdkVersion;
        this.appId = configuration.appId;
        this.connectionId = configuration.connectionId;
        this.tab = configuration.tab;
        this.contextFactory = configuration.contextFactory;
        this.storage = configuration.storage;
        this.eventSubscriber = configuration.eventSubscriber;
        this.cidAssigner = configuration.cidAssigner;
        this.tokenProvider = configuration.tokenProvider;
        this.logger = configuration.logger;
      }
      PlaygroundPlugin2.prototype.enable = function() {
        var _this = this;
        var connectionId = this.resolveConnectionId();
        if (connectionId === null) {
          return;
        }
        this.syncListener = function() {
          return _this.cidAssigner.assignCid().then(function(cid) {
            _this.syncToken(connectionId, cid);
          }).catch(function(error) {
            _this.logger.warn("Sync failed: " + error_1.formatCause(error));
          });
        };
        this.eventSubscriber.addListener("tokenChanged", this.syncListener);
        this.tab.addListener("urlChange", this.syncListener);
        return this.syncListener();
      };
      PlaygroundPlugin2.prototype.resolveConnectionId = function() {
        if (this.connectionId !== void 0) {
          this.logger.debug("Connection ID passed in configuration");
          return this.connectionId;
        }
        var url = new URL(this.tab.url);
        var connectionId = url.searchParams.get(CONNECTION_PARAMETER);
        if (connectionId === null || connectionId === "") {
          this.logger.debug("No connection ID found in URL");
          connectionId = this.storage.getItem("connectionId");
          this.logger.debug(connectionId !== null ? "Previous connection ID found" : "No previous connection ID found");
          return connectionId;
        }
        this.logger.debug("Connection ID found in URL");
        this.storage.setItem("connectionId", connectionId);
        return connectionId;
      };
      PlaygroundPlugin2.prototype.disable = function() {
        if (this.syncListener !== void 0) {
          this.eventSubscriber.removeListener("tokenChanged", this.syncListener);
          this.tab.removeListener("urlChange", this.syncListener);
          delete this.syncListener;
        }
      };
      PlaygroundPlugin2.prototype.syncToken = function(connectionId, cid) {
        var _this = this;
        var iframe = document.createElement("iframe");
        iframe.setAttribute("src", constants_1.PLAYGROUND_CONNECT_URL);
        iframe.setAttribute("sandbox", "allow-scripts allow-same-origin");
        iframe.style.visibility = "hidden";
        iframe.style.opacity = "0";
        iframe.style.border = "0";
        iframe.style.width = "0";
        iframe.style.height = "0";
        var context = this.createContext();
        iframe.onload = function() {
          var _a, _b;
          if (iframe.contentWindow === null) {
            if (document.body.contains(iframe)) {
              document.body.removeChild(iframe);
            }
            _this.logger.warn("Sync handshake failed");
            return;
          }
          var listener = function(event) {
            if (event.origin !== constants_1.PLAYGROUND_ORIGIN || event.data !== connectionId) {
              return;
            }
            window.removeEventListener("message", listener);
            if (document.body.contains(iframe)) {
              document.body.removeChild(iframe);
            }
            _this.logger.debug("Sync completed");
          };
          window.addEventListener("message", listener);
          var payload = {
            appId: _this.appId,
            connectionId,
            sdkVersion: _this.sdkVersion,
            tabId: _this.tab.id,
            cid,
            token: (_b = (_a = _this.tokenProvider.getToken()) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : null,
            context
          };
          iframe.contentWindow.postMessage(payload, constants_1.PLAYGROUND_ORIGIN);
          _this.logger.debug("Waiting for sync acknowledgment...");
        };
        this.logger.debug("Sync started");
        var connect = function() {
          document.body.appendChild(iframe);
        };
        if (document.body === null) {
          document.addEventListener("DOMContentLoaded", connect);
        } else {
          connect();
        }
      };
      PlaygroundPlugin2.prototype.createContext = function() {
        var _a = this.contextFactory.createContext(), page = _a.page, campaign = _a.campaign, timezone = _a.timezone;
        var context = {};
        if (page !== void 0) {
          context.page = page;
        }
        if (campaign !== void 0) {
          context.campaign = campaign;
        }
        if (timezone !== void 0) {
          context.timezone = timezone;
        }
        return context;
      };
      return PlaygroundPlugin2;
    }();
    exports.PlaygroundPlugin = PlaygroundPlugin;
  }
});

// node_modules/@croct/plug/plug.js
var require_plug = __commonJS({
  "node_modules/@croct/plug/plug.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GlobalPlug = void 0;
    var tslib_1 = require_tslib();
    var sdkFacade_1 = require_sdkFacade();
    var error_1 = require_error();
    var validation_1 = require_validation();
    var token_1 = require_token2();
    var sdk_1 = require_sdk2();
    var constants_1 = require_constants2();
    var playground_1 = require_playground();
    var PLUGIN_NAMESPACE = "Plugin";
    function detectAppId() {
      var script = window.document.querySelector("script[src^='" + constants_1.CDN_URL + "']");
      if (!(script instanceof HTMLScriptElement)) {
        return null;
      }
      return new URL(script.src).searchParams.get("appId");
    }
    var GlobalPlug = function() {
      function GlobalPlug2() {
        var _this = this;
        this.pluginFactories = { playground: playground_1.factory };
        this.plugins = {};
        this.ready = new Promise(function(resolve) {
          _this.initialize = resolve;
        });
      }
      GlobalPlug2.prototype.extend = function(name, plugin) {
        if (this.pluginFactories[name] !== void 0) {
          throw new Error('Another plugin is already registered with name "' + name + '".');
        }
        this.pluginFactories[name] = plugin;
      };
      GlobalPlug2.prototype.plug = function(configuration) {
        var e_1, _a;
        var _this = this;
        var _b, _c, _d, _e;
        if (configuration === void 0) {
          configuration = {};
        }
        if (this.instance !== void 0) {
          var logger_1 = this.instance.getLogger();
          logger_1.info("Croct is already plugged in.");
          return;
        }
        var detectedAppId = detectAppId();
        var configuredAppId = (_b = configuration.appId) !== null && _b !== void 0 ? _b : null;
        if (detectedAppId !== null && configuredAppId !== null && detectedAppId !== configuredAppId) {
          throw new Error('The specified app ID and the auto-detected app ID are conflicting. There is no need to specify an app ID when using an application-specific tag. Please try again omitting the "appId" option.');
        }
        var appId = detectedAppId !== null && detectedAppId !== void 0 ? detectedAppId : configuredAppId;
        if (appId === null) {
          throw new Error('The app ID must be specified when it cannot be auto-detected. Please try again specifying the "appId" option.');
        }
        var plugins = configuration.plugins, test = configuration.test, sdkConfiguration = tslib_1.__rest(configuration, ["plugins", "test"]);
        var sdk = sdkFacade_1.SdkFacade.init(tslib_1.__assign(tslib_1.__assign({}, sdkConfiguration), { appId, test: test !== null && test !== void 0 ? test : typeof process === "object" && (((_c = process.env) === null || _c === void 0 ? void 0 : _c.CROCT_TEST_MODE) !== void 0 ? process.env.CROCT_TEST_MODE === "true" : ((_d = process.env) === null || _d === void 0 ? void 0 : _d.NODE_ENV) === "test") }));
        this.instance = sdk;
        var logger = this.instance.getLogger();
        if (detectedAppId === configuredAppId) {
          logger.warn('It is strongly recommended omitting the "appId" option when using the application-specific tag as it is detected automatically.');
        }
        var pending = [];
        var _loop_1 = function(name_12, options2) {
          logger.debug('Initializing plugin "' + name_12 + '"...');
          var factory = this_1.pluginFactories[name_12];
          if (factory === void 0) {
            logger.error('Plugin "' + name_12 + '" is not registered.');
            return "continue";
          }
          if (typeof options2 !== "boolean" && (options2 === null || typeof options2 !== "object")) {
            logger.error('Invalid options for plugin "' + name_12 + '", ' + ("expected either boolean or object but got " + validation_1.describe(options2)));
            return "continue";
          }
          if (options2 === false) {
            logger.warn('Plugin "' + name_12 + '" is declared but not enabled');
            return "continue";
          }
          var args = {
            options: options2 === true ? {} : options2,
            sdk: {
              version: sdk_1.VERSION,
              appId,
              tracker: sdk.tracker,
              evaluator: sdk.evaluator,
              user: sdk.user,
              session: sdk.session,
              tab: sdk.context.getTab(),
              tokenStore: {
                getToken: sdk.getToken.bind(sdk),
                setToken: sdk.setToken.bind(sdk)
              },
              cidAssigner: sdk.cidAssigner,
              eventManager: sdk.eventManager,
              getLogger: function() {
                var namespace = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                  namespace[_i] = arguments[_i];
                }
                return sdk.getLogger.apply(sdk, tslib_1.__spreadArray([PLUGIN_NAMESPACE, name_12], tslib_1.__read(namespace)));
              },
              getTabStorage: function() {
                var namespace = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                  namespace[_i] = arguments[_i];
                }
                return sdk.getTabStorage.apply(sdk, tslib_1.__spreadArray([PLUGIN_NAMESPACE, name_12], tslib_1.__read(namespace)));
              },
              getBrowserStorage: function() {
                var namespace = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                  namespace[_i] = arguments[_i];
                }
                return sdk.getBrowserStorage.apply(sdk, tslib_1.__spreadArray([PLUGIN_NAMESPACE, name_12], tslib_1.__read(namespace)));
              }
            }
          };
          var plugin = void 0;
          try {
            plugin = factory(args);
          } catch (error) {
            logger.error('Failed to initialize plugin "' + name_12 + '": ' + error_1.formatCause(error));
            return "continue";
          }
          logger.debug('Plugin "' + name_12 + '" initialized');
          if (typeof plugin !== "object") {
            return "continue";
          }
          this_1.plugins[name_12] = plugin;
          var promise = plugin.enable();
          if (!(promise instanceof Promise)) {
            logger.debug('Plugin "' + name_12 + '" enabled');
            return "continue";
          }
          pending.push(promise.then(function() {
            return logger.debug('Plugin "' + name_12 + '" enabled');
          }).catch(function(error) {
            return logger.error('Failed to enable plugin "' + name_12 + '": ' + error_1.formatCause(error));
          }));
        };
        var this_1 = this;
        try {
          for (var _f = tslib_1.__values(Object.entries(tslib_1.__assign({ playground: true }, plugins))), _g = _f.next(); !_g.done; _g = _f.next()) {
            var _h = tslib_1.__read(_g.value, 2), name_1 = _h[0], options = _h[1];
            _loop_1(name_1, options);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_g && !_g.done && (_a = _f.return))
              _a.call(_f);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        var initializeEap = (_e = window.croctEap) === null || _e === void 0 ? void 0 : _e.initialize;
        if (typeof initializeEap === "function") {
          initializeEap.call(this);
        }
        Promise.all(pending).then(function() {
          _this.initialize();
          logger.debug("Initialization complete");
        });
      };
      Object.defineProperty(GlobalPlug2.prototype, "initialized", {
        get: function() {
          return this.instance !== void 0;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(GlobalPlug2.prototype, "plugged", {
        get: function() {
          var _this = this;
          return this.ready.then(function() {
            return _this;
          });
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(GlobalPlug2.prototype, "flushed", {
        get: function() {
          var _this = this;
          return this.tracker.flushed.then(function() {
            return _this;
          });
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(GlobalPlug2.prototype, "sdk", {
        get: function() {
          if (this.instance === void 0) {
            throw new Error("Croct is not plugged in.");
          }
          return this.instance;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(GlobalPlug2.prototype, "tracker", {
        get: function() {
          return this.sdk.tracker;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(GlobalPlug2.prototype, "evaluator", {
        get: function() {
          return this.sdk.evaluator;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(GlobalPlug2.prototype, "user", {
        get: function() {
          return this.sdk.user;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(GlobalPlug2.prototype, "session", {
        get: function() {
          return this.sdk.session;
        },
        enumerable: false,
        configurable: true
      });
      GlobalPlug2.prototype.isAnonymous = function() {
        return this.sdk.context.isAnonymous();
      };
      GlobalPlug2.prototype.getUserId = function() {
        return this.sdk.context.getUser();
      };
      GlobalPlug2.prototype.identify = function(userId) {
        if (typeof userId !== "string") {
          throw new Error("The user ID must be a string. Read more on https://croct.help/plug-js/id-conversion");
        }
        this.sdk.identify(userId);
      };
      GlobalPlug2.prototype.anonymize = function() {
        this.sdk.anonymize();
      };
      GlobalPlug2.prototype.setToken = function(token) {
        this.sdk.setToken(token_1.Token.parse(token));
      };
      GlobalPlug2.prototype.unsetToken = function() {
        this.sdk.unsetToken();
      };
      GlobalPlug2.prototype.track = function(type, payload) {
        return this.sdk.tracker.track(type, payload);
      };
      GlobalPlug2.prototype.evaluate = function(expression, options) {
        if (options === void 0) {
          options = {};
        }
        return this.sdk.evaluator.evaluate(expression, options);
      };
      GlobalPlug2.prototype.test = function(expression, options) {
        if (options === void 0) {
          options = {};
        }
        return this.evaluate(expression, options).then(function(result) {
          return result === true;
        });
      };
      GlobalPlug2.prototype.fetch = function(slotId, options) {
        if (options === void 0) {
          options = {};
        }
        return this.eap("fetch").call(this, slotId, options);
      };
      GlobalPlug2.prototype.unplug = function() {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
          var _a, instance, plugins, logger, pending, _loop_2, _b, _c, _d, pluginName, controller;
          var e_2, _e;
          var _this = this;
          return tslib_1.__generator(this, function(_f) {
            switch (_f.label) {
              case 0:
                if (this.instance === void 0) {
                  return [2];
                }
                _a = this, instance = _a.instance, plugins = _a.plugins;
                logger = this.sdk.getLogger();
                pending = [];
                _loop_2 = function(pluginName2, controller2) {
                  if (typeof controller2.disable !== "function") {
                    return "continue";
                  }
                  logger.debug('Disabling plugin "' + pluginName2 + '"...');
                  var promise = controller2.disable();
                  if (!(promise instanceof Promise)) {
                    logger.debug('Plugin "' + pluginName2 + '" disabled');
                    return "continue";
                  }
                  pending.push(promise.then(function() {
                    return logger.debug('Plugin "' + pluginName2 + '" disabled');
                  }).catch(function(error) {
                    return logger.error('Failed to disable "' + pluginName2 + '": ' + error_1.formatCause(error));
                  }));
                };
                try {
                  for (_b = tslib_1.__values(Object.entries(plugins)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    _d = tslib_1.__read(_c.value, 2), pluginName = _d[0], controller = _d[1];
                    _loop_2(pluginName, controller);
                  }
                } catch (e_2_1) {
                  e_2 = { error: e_2_1 };
                } finally {
                  try {
                    if (_c && !_c.done && (_e = _b.return))
                      _e.call(_b);
                  } finally {
                    if (e_2)
                      throw e_2.error;
                  }
                }
                delete this.instance;
                this.plugins = {};
                this.ready = new Promise(function(resolve) {
                  _this.initialize = resolve;
                });
                return [4, Promise.all(pending)];
              case 1:
                _f.sent();
                _f.label = 2;
              case 2:
                _f.trys.push([2, , 4, 5]);
                return [4, instance.close()];
              case 3:
                _f.sent();
                return [3, 5];
              case 4:
                logger.info("\u{1F50C} Croct has been unplugged.");
                return [7];
              case 5:
                return [2];
            }
          });
        });
      };
      GlobalPlug2.prototype.eap = function(feature) {
        var logger = this.sdk.getLogger();
        var eap = window.croctEap;
        var method = typeof eap === "object" ? eap[feature] : void 0;
        if (typeof method !== "function") {
          throw new Error("The " + feature + " feature is currently available only to accounts participating in our Early-Access Program (EAP). Please contact your Customer Success Manager or email eap@croct.com to check your account eligibility.");
        }
        logger.warn("The " + feature + " API is still unstable and subject to change in future releases.");
        return method;
      };
      return GlobalPlug2;
    }();
    exports.GlobalPlug = GlobalPlug;
  }
});

// node_modules/@croct/plug/index.js
var require_plug2 = __commonJS({
  "node_modules/@croct/plug/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var plug_1 = require_plug();
    exports.default = new plug_1.GlobalPlug();
  }
});

// node_modules/@croct/plug-react/Personalization.js
var require_Personalization = __commonJS({
  "node_modules/@croct/plug-react/Personalization.js"() {
    var jsxRuntime = require_jsx_runtime();
    var react = require_react();
    var { _objectWithoutPropertiesLoose, _excluded$1, useEvaluation } = require_plug_react();
  }
});

// node_modules/@croct/plug-react/index.js
var require_plug_react = __commonJS({
  "node_modules/@croct/plug-react/index.js"(exports) {
    var jsxRuntime = require_jsx_runtime();
    var react = require_react();
    var csrPlug = require_plug2();
    var { Personalization } = require_Personalization();
    function _interopDefaultLegacy(e) {
      return e && typeof e === "object" && "default" in e ? e : { "default": e };
    }
    var csrPlug__default = _interopDefaultLegacy(csrPlug);
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    exports._objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;
    function isSsr() {
      return typeof window === "undefined" || typeof window.document === "undefined" || typeof window.document.createElement === "undefined";
    }
    var croct = !isSsr() ? csrPlug__default["default"] : new Proxy(csrPlug__default["default"], {
      get(_, property) {
        switch (property) {
          case "initialized":
            return false;
          case "plug":
            return () => {
            };
          case "unplug":
            return () => Promise.resolve();
          default:
            throw new Error("Property croct." + String(property) + " is not supported on server-side (SSR). Consider refactoring the logic as a side-effect (useEffect) or a client-side callback (onClick, onChange, etc).");
        }
      }
    });
    var _excluded$4 = ["children"];
    var CroctContext = react.createContext(null);
    CroctContext.displayName = "CroctContext";
    var CroctProvider = (_ref) => {
      var {
        children
      } = _ref, configuration = _objectWithoutPropertiesLoose(_ref, _excluded$4);
      var parent = react.useContext(CroctContext);
      if (parent !== null) {
        throw new Error("You cannot render <CroctProvider> inside another <CroctProvider>. Croct should only be initialized once in the application.");
      }
      var context = react.useMemo(() => ({
        get plug() {
          if (!croct.initialized) {
            croct.plug(configuration);
          }
          return croct;
        }
      }), [configuration]);
      react.useEffect(() => {
        croct.plug(configuration);
        return () => {
          croct.unplug();
        };
      }, []);
      return jsxRuntime.jsx(CroctContext.Provider, {
        value: context,
        children
      });
    };
    var Cache = class {
      constructor(defaultExpiration) {
        this.cache = {};
        this.defaultExpiration = void 0;
        this.defaultExpiration = defaultExpiration;
      }
      load(configuration) {
        var {
          cacheKey,
          loader,
          fallback,
          expiration = this.defaultExpiration
        } = configuration;
        var cachedEntry = this.get(cacheKey);
        if (cachedEntry !== void 0) {
          if (cachedEntry.error !== void 0) {
            if (fallback !== void 0) {
              return fallback;
            }
            throw cachedEntry.error;
          }
          if (cachedEntry.result !== void 0) {
            return cachedEntry.result;
          }
          throw cachedEntry.promise;
        }
        var entry = {
          dispose: () => {
            if (entry.timeout !== void 0 || expiration < 0) {
              return;
            }
            entry.timeout = window.setTimeout(() => {
              delete this.cache[cacheKey];
            }, expiration);
          },
          promise: loader().then((result) => {
            entry.result = result;
            return result;
          }).catch((error) => {
            entry.error = error;
          }).finally(() => {
            entry.dispose();
          })
        };
        this.cache[cacheKey] = entry;
        throw entry.promise;
      }
      get(cacheKey) {
        var entry = this.cache[cacheKey];
        if (entry === void 0) {
          return void 0;
        }
        if (entry.timeout !== void 0) {
          clearTimeout(entry.timeout);
          delete entry.timeout;
          entry.dispose();
        }
        return entry;
      }
    };
    var _excluded$3 = ["initial"];
    var cache = new Cache(60 * 1e3);
    function useLoader(_ref) {
      var _cache$get;
      var {
        initial
      } = _ref, options = _objectWithoutPropertiesLoose(_ref, _excluded$3);
      var loadedValue = (_cache$get = cache.get(options.cacheKey)) == null ? void 0 : _cache$get.result;
      var [value, setValue] = react.useState(loadedValue !== void 0 ? loadedValue : initial);
      var [isUnmounted, setUnmounted] = react.useState(false);
      react.useEffect(() => {
        if (initial !== void 0) {
          try {
            setValue(cache.load(options));
          } catch (result) {
            if (result instanceof Promise) {
              result.then((resolvedValue) => {
                if (!isUnmounted) {
                  setValue(resolvedValue);
                }
              });
              return;
            }
            setValue(void 0);
            return;
          }
        }
        return () => {
          setUnmounted(true);
        };
      }, []);
      if (value === void 0) {
        return cache.load(options);
      }
      return value;
    }
    function useCroct() {
      var context = react.useContext(CroctContext);
      if (context === null) {
        throw new Error("useCroct() can only be used in the context of a <CroctProvider> component.");
      }
      return context.plug;
    }
    var _excluded$2 = ["cacheKey", "fallback", "initial", "expiration"];
    function cleanEvaluationOptions(options) {
      var result = {};
      for (var [key, value] of Object.entries(options)) {
        if (value !== void 0) {
          result[key] = value;
        }
      }
      return result;
    }
    function useCsrEvaluation(expression, options) {
      var _options$attributes;
      if (options === void 0) {
        options = {};
      }
      var {
        cacheKey,
        fallback,
        initial,
        expiration
      } = options, evaluationOptions = _objectWithoutPropertiesLoose(options, _excluded$2);
      var croct2 = useCroct();
      return useLoader({
        cacheKey: "useEvaluation:" + (cacheKey != null ? cacheKey : "") + ":" + expression + ":" + JSON.stringify((_options$attributes = options.attributes) != null ? _options$attributes : ""),
        loader: () => croct2.evaluate(expression, cleanEvaluationOptions(evaluationOptions)),
        initial,
        fallback,
        expiration
      });
    }
    function useSsrEvaluation(_, _temp) {
      var {
        initial
      } = _temp === void 0 ? {} : _temp;
      if (initial === void 0) {
        throw new Error("The initial value is required for server-side rendering (SSR).");
      }
      return initial;
    }
    var useEvaluation = isSsr() ? useSsrEvaluation : useCsrEvaluation;
    function useCsrContent(id, options) {
      if (options === void 0) {
        options = {};
      }
      var {
        fallback,
        initial,
        cacheKey,
        expiration
      } = options;
      var croct2 = useCroct();
      return useLoader({
        cacheKey: "useContent:" + (cacheKey != null ? cacheKey : "") + ":" + id,
        loader: () => croct2.fetch(id).then((_ref) => {
          var {
            payload
          } = _ref;
          return payload;
        }),
        initial,
        fallback,
        expiration
      });
    }
    function useSsrContent(_, _temp) {
      var {
        initial
      } = _temp === void 0 ? {} : _temp;
      if (initial === void 0) {
        throw new Error("The initial value is required for server-side rendering (SSR).");
      }
      return initial;
    }
    var useContent = isSsr() ? useSsrContent : useCsrContent;
    var _excluded$1 = ["expression", "children"];
    exports._excluded$1 = _excluded$1;
    var _excluded = ["id", "children"];
    var Slot = (props) => {
      var {
        id,
        children
      } = props, options = _objectWithoutPropertiesLoose(props, _excluded);
      var data = useContent(id, options);
      return jsxRuntime.jsx(react.Fragment, {
        children: children(data)
      });
    };
    exports.CroctContext = CroctContext;
    exports.CroctProvider = CroctProvider;
    exports.Personalization = Personalization;
    exports.Slot = Slot;
    exports.useContent = useContent;
    exports.useCroct = useCroct;
    exports.useEvaluation = useEvaluation;
  }
});

// dep:@croct_plug-react
var croct_plug_react_default = require_plug_react();
export {
  croct_plug_react_default as default
};
//# sourceMappingURL=@croct_plug-react.js.map
